<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sheharyar Naseer]]></title>
  <link href="https://sheharyar.me/atom.xml" rel="self"/>
  <link href="https://sheharyar.me/"/>
  <updated>2018-02-15T04:59:32-05:00</updated>
  <id>https://sheharyar.me/</id>
  <author>
    <name><![CDATA[Sheharyar Naseer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing a Simple Blockchain in Elixir]]></title>
    <link href="https://sheharyar.me/blog/writing-blockchain-elixir/"/>
    <updated>2018-01-17T20:13:49-05:00</updated>
    <id>https://sheharyar.me/blog/writing-blockchain-elixir</id>
    <content type="html"><![CDATA[<p>With all the hype about Bitcoin and other cryptocurrencies in recent years, I wanted to understand
their underlying technology, i.e. Blockchain, better. So of course, what better way to learn than
write my own. After reading up a bit on the internals of Bitcoin, the basic structure of blockchains
and related data structures such as Merkle Trees, I decided to write a very simple version in Elixir.</p>

<!-- more -->


<p>I went with Elixir for a couple of reasons:</p>

<ol>
<li> To get better at it</li>
<li> See how Erlang&rsquo;s distributed model could help me with replication</li>
<li> I just love the damn language too much</li>
</ol>


<p>The original blockchain I wrote is a bit complicated since I end up adding too many features (I wanted
to experiment with node synchronization, RPC calls, cryptographic validations using Ecto, and file
storage as an application). So for the purposes of this article, we are going to write a blockchain
that simply stores some text in each block (but you can check out the <a href="https://github.com/sheharyarn/dbfs/">actual project here</a>).</p>

<h2>The Basics</h2>

<p>In the simplest of terms, a blockchain is basically a list of &ldquo;blocks&rdquo; where each block object/struct
stores a cryptographic hash of the previous block. A blockchain is valid only if the hash of each block in
the chain matches the stored hash in the next one. Cryptographically, this means that if the tiniest bit
of data changes in any block, the hashes of all consequent blocks would change drastically and as a result
invalidate the blockchain. So, a blockchain must always be append-only, i.e. no previous data can be
changed or removed.</p>

<h2>Structure</h2>

<p>Each block in the chain must store a couple of items; such as the data being stored and the timestamp it
was created on. We also need to store the has of the previous block, and for good measure let&rsquo;s store the
hash of the current block as well. Although we should also use Public-Key Cryptography and store the
signature of the author (which can be verified later), we&rsquo;re going to ignore that part and focus on
understanding the basics (maybe we can do that in another blog post in the future). Our struct should look
something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="p">%</span><span class="nc">Block</span><span class="p">{</span>
</span><span class='line'>  <span class="ss">data</span><span class="p">:</span> <span class="n">some_text</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">timestamp</span><span class="p">:</span> <span class="n">naive_datetime</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">prev_hash</span><span class="p">:</span> <span class="n">hash_of_the_previous_block</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">hash</span><span class="p">:</span> <span class="n">hash_of_the_current_block</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, let&rsquo;s create a Block module, with two methods; <code>new/2</code> that takes the data that&rsquo;s going to go in the
block along with the hash of the previous block, and a <code>zero/0</code> method that builds the first &ldquo;zero&rdquo; block
in a blockchain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Block</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">defstruct</span> <span class="p">[</span><span class="ss">:data</span><span class="p">,</span> <span class="ss">:timestamp</span><span class="p">,</span> <span class="ss">:prev_hash</span><span class="p">,</span> <span class="ss">:hash</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="na">@doc</span> <span class="s2">&quot;Build a new block for given data and previous hash&quot;</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">new</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">prev_hash</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">%</span><span class="nc">Block</span><span class="p">{</span>
</span><span class='line'>      <span class="ss">data</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">prev_hash</span><span class="p">:</span> <span class="n">prev_hash</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">timestamp</span><span class="p">:</span> <span class="nc">NaiveDateTime</span><span class="p">.</span><span class="n">utc_now</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="na">@doc</span> <span class="s2">&quot;Build the initial block of the chain&quot;</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">zero</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">%</span><span class="nc">Block</span><span class="p">{</span>
</span><span class='line'>      <span class="ss">data</span><span class="p">:</span> <span class="s2">&quot;ZERO_DATA&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">prev_hash</span><span class="p">:</span> <span class="s2">&quot;ZERO_HASH&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">timestamp</span><span class="p">:</span> <span class="nc">NaiveDateTime</span><span class="p">.</span><span class="n">utc_now</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Cryptography</h2>

<p>Since blockchains involve a lot of cryptography, it&rsquo;s better to have a separate module responsible for it
and provide a uniform interface (so we can change the implementation in the future if we want without
breaking the functionality). We also need to encode our data in some format before we hash it. You can go
with anything you want, but we&rsquo;re going to use JSON. Start by adding the <code>poison</code> dependency in your
<code>mix.exs</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="p">{</span><span class="ss">:poison</span><span class="p">,</span> <span class="s2">&quot;~&gt; 3.1&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then create a <code>Crypto</code> module with the helper hashing functions. We&rsquo;ll use the built in SHA256 hashing
in Erlang&rsquo;s <code>:crypto</code> module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Crypto</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Specify which fields to hash in a block</span>
</span><span class='line'>  <span class="na">@hash_fields</span> <span class="p">[</span><span class="ss">:data</span><span class="p">,</span> <span class="ss">:timestamp</span><span class="p">,</span> <span class="ss">:prev_hash</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="na">@doc</span> <span class="s2">&quot;Calculate hash of block&quot;</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">hash</span><span class="p">(%{}</span> <span class="p">=</span> <span class="n">block</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">block</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nc">Map</span><span class="p">.</span><span class="n">take</span><span class="p">(</span><span class="na">@hash_fields</span><span class="p">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nc">Poison</span><span class="p">.</span><span class="n">encode!</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">sha256</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="na">@doc</span> <span class="s2">&quot;Calculate and put the hash in the block&quot;</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">put_hash</span><span class="p">(%{}</span> <span class="p">=</span> <span class="n">block</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">%{</span> <span class="n">block</span> <span class="p">|</span> <span class="ss">hash</span><span class="p">:</span> <span class="n">hash</span><span class="p">(</span><span class="n">block</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Calculate SHA256 for a binary string</span>
</span><span class='line'>  <span class="kd">defp</span> <span class="n">sha256</span><span class="p">(</span><span class="n">binary</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="ss">:crypto</span><span class="p">.</span><span class="n">hash</span><span class="p">(</span><span class="ss">:sha256</span><span class="p">,</span> <span class="n">binary</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="nc">Base</span><span class="p">.</span><span class="n">encode16</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We were very careful to only encode only the main 3 fields here (without the <code>hash</code> field of the block)
using the <code>Map.take/2</code> function, and then calculate their SHA256. We also added a helper method <code>put_hash/1</code>
to directly put the hash in it. If we were using public-key cryptography and storing the author&rsquo;s signature
in the blocks as well, we would have created <code>sign/1</code> and <code>verify/1</code> methods for that purpose, using the
<a href="https://github.com/anoskov/rsa-ex/">RsaEx</a> library or Erlang&rsquo;s built-in <a href="http://erlang.org/doc/man/public_key.html">:public_key</a> module.</p>

<p>We&rsquo;ll also add a <code>valid?</code> method in our <code>Block</code> module to check if the hash of block is valid, and matches
the previous block&rsquo;s hash. When only the block itself is given, it calculates the hash of the block and
compares it with the stored value. But when the previous block is also given, it compares the value of the
previous block&rsquo;s hash to the one stored in the <code>prev_hash</code> field:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Block</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Existing stuff...</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="na">@doc</span> <span class="s2">&quot;Check if a block is valid&quot;</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">valid?</span><span class="p">(%</span><span class="nc">Block</span><span class="p">{}</span> <span class="p">=</span> <span class="n">block</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nc">Crypto</span><span class="p">.</span><span class="n">hash</span><span class="p">(</span><span class="n">block</span><span class="p">)</span> <span class="o">==</span> <span class="n">block</span><span class="p">.</span><span class="n">hash</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">valid?</span><span class="p">(%</span><span class="nc">Block</span><span class="p">{}</span> <span class="p">=</span> <span class="n">block</span><span class="p">,</span> <span class="p">%</span><span class="nc">Block</span><span class="p">{}</span> <span class="p">=</span> <span class="n">prev_block</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">(</span><span class="n">block</span><span class="p">.</span><span class="n">prev_hash</span> <span class="o">==</span> <span class="n">prev_block</span><span class="p">.</span><span class="n">hash</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">valid?</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Bringing it Together</h2>

<p>Finally, let&rsquo;s build the Blockchain module that contains all blocks in order and provides a neat interface
to insert new blocks and calculate their hashes. Ideally, the blockchain should be stored on the disk
(using a database, for example) and the module providing a quick interface to it. Even if we decide to not
persist the chain on the disk, we can use GenServers or Mnesia tables to maintain the state. But again,
for the purposes of this post, we won&rsquo;t manage the state and just interact with it as a list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Blockchain</span> <span class="k">do</span>
</span><span class='line'>  <span class="na">@doc</span> <span class="s2">&quot;Create a new blockchain with a zero block&quot;</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">new</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">[</span> <span class="nc">Crypto</span><span class="p">.</span><span class="n">put_hash</span><span class="p">(</span><span class="nc">Block</span><span class="p">.</span><span class="n">zero</span><span class="p">)</span> <span class="p">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="na">@doc</span> <span class="s2">&quot;Insert given data as a new block in the blockchain&quot;</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">insert</span><span class="p">(</span><span class="n">blockchain</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="ow">when</span> <span class="n">is_list</span><span class="p">(</span><span class="n">blockchain</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">%</span><span class="nc">Block</span><span class="p">{</span><span class="ss">hash</span><span class="p">:</span> <span class="n">prev</span><span class="p">}</span> <span class="p">=</span> <span class="n">hd</span><span class="p">(</span><span class="n">blockchain</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">block</span> <span class="p">=</span>
</span><span class='line'>      <span class="n">data</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nc">Block</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">prev</span><span class="p">)</span>
</span><span class='line'>      <span class="o">|&gt;</span> <span class="nc">Crypto</span><span class="p">.</span><span class="n">put_hash</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span> <span class="n">block</span> <span class="p">|</span> <span class="n">blockchain</span> <span class="p">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="na">@doc</span> <span class="s2">&quot;Validate the complete blockchain&quot;</span>
</span><span class='line'>  <span class="kd">def</span> <span class="n">valid?</span><span class="p">(</span><span class="n">blockchain</span><span class="p">)</span> <span class="ow">when</span> <span class="n">is_list</span><span class="p">(</span><span class="n">blockchain</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">zero</span> <span class="p">=</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">reduce_while</span><span class="p">(</span><span class="n">blockchain</span><span class="p">,</span> <span class="no">nil</span><span class="p">,</span> <span class="k">fn</span> <span class="n">prev</span><span class="p">,</span> <span class="n">current</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="k">cond</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">current</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">-&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="ss">:cont</span><span class="p">,</span> <span class="n">prev</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nc">Block</span><span class="p">.</span><span class="n">valid?</span><span class="p">(</span><span class="n">current</span><span class="p">,</span> <span class="n">prev</span><span class="p">)</span> <span class="p">-&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="ss">:cont</span><span class="p">,</span> <span class="n">prev</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="no">true</span> <span class="p">-&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="ss">:halt</span><span class="p">,</span> <span class="no">false</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">zero</span><span class="p">,</span> <span class="ss">do</span><span class="p">:</span> <span class="nc">Block</span><span class="p">.</span><span class="n">valid?</span><span class="p">(</span><span class="n">zero</span><span class="p">),</span> <span class="ss">else</span><span class="p">:</span> <span class="no">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>new/0</code> method returns a new blockchain, with a zero block as its only contents. The <code>insert/2</code> method
creates a new block for the given data, hashes it and inserts it into the blockchain, returning the updated
state. Finally, the most interesting method here, <code>valid?/1</code>, goes through the entire blockchain in reverse
order (most recent block to the oldest one) using <code>Enum.reduce_while/3</code>, validating blocks in pairs. If at
any point the internal <code>Block.valid?</code> returns false, the entire method does too.</p>

<h2>Running it</h2>

<p>We don&rsquo;t have fancy blockchain network running right now, so we&rsquo;ll simply jump in <code>iex</code> and test it out
there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># Create a new Blockchain</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">chain</span> <span class="p">=</span> <span class="nc">Blockchain</span><span class="p">.</span><span class="n">new</span>
</span><span class='line'><span class="p">[%</span><span class="nc">Block</span><span class="p">{</span><span class="ss">data</span><span class="p">:</span> <span class="s2">&quot;ZERO_DATA&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">hash</span><span class="p">:</span> <span class="s2">&quot;BDC59FEE8F9239579CB4A29828F5F19B081EF3D34A99331E898B22CDDA7922F0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">prev_hash</span><span class="p">:</span> <span class="s2">&quot;ZERO_HASH&quot;</span><span class="p">,</span> <span class="ss">timestamp</span><span class="p">:</span> <span class="sx">~N[2018-01-14 10:25:25.936002]</span><span class="p">}]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># Insert new data as a block</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">chain</span> <span class="p">=</span> <span class="nc">Blockchain</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">chain</span><span class="p">,</span> <span class="s2">&quot;MESSAGE 1&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">[%</span><span class="nc">Block</span><span class="p">{</span><span class="ss">data</span><span class="p">:</span> <span class="s2">&quot;MESSAGE 1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">hash</span><span class="p">:</span> <span class="s2">&quot;A14F863D347E37B54DD68BB12251A74FE06EA0623DC40856EBC81942B63001FE&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">prev_hash</span><span class="p">:</span> <span class="s2">&quot;BDC59FEE8F9239579CB4A29828F5F19B081EF3D34A99331E898B22CDDA7922F0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">timestamp</span><span class="p">:</span> <span class="sx">~N[2018-01-14 10:26:40.121790]</span><span class="p">},</span>
</span><span class='line'> <span class="p">%</span><span class="nc">Block</span><span class="p">{</span><span class="ss">data</span><span class="p">:</span> <span class="s2">&quot;ZERO_DATA&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">hash</span><span class="p">:</span> <span class="s2">&quot;BDC59FEE8F9239579CB4A29828F5F19B081EF3D34A99331E898B22CDDA7922F0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">prev_hash</span><span class="p">:</span> <span class="s2">&quot;ZERO_HASH&quot;</span><span class="p">,</span> <span class="ss">timestamp</span><span class="p">:</span> <span class="sx">~N[2018-01-14 10:25:25.936002]</span><span class="p">}]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># Insert a few more blocks</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">chain</span> <span class="p">=</span> <span class="n">chain</span> <span class="o">|&gt;</span> <span class="nc">Blockchain</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="s2">&quot;MESSAGE 2&quot;</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="nc">Blockchain</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="s2">&quot;MESSAGE 3&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">[%</span><span class="nc">Block</span><span class="p">{</span><span class="ss">data</span><span class="p">:</span> <span class="s2">&quot;MESSAGE 3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">hash</span><span class="p">:</span> <span class="s2">&quot;3708929579029151347B9C588E79EDEEF4E9911579AF9CF5BD2D4437B0FFBEDF&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">prev_hash</span><span class="p">:</span> <span class="s2">&quot;FA609D2A255FD56B90D5F10108B804DF4BF42CA257CDECC291698783DDC74CB0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">timestamp</span><span class="p">:</span> <span class="sx">~N[2018-01-14 10:27:07.874248]</span><span class="p">},</span>
</span><span class='line'> <span class="p">%</span><span class="nc">Block</span><span class="p">{</span><span class="ss">data</span><span class="p">:</span> <span class="s2">&quot;MESSAGE 2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">hash</span><span class="p">:</span> <span class="s2">&quot;FA609D2A255FD56B90D5F10108B804DF4BF42CA257CDECC291698783DDC74CB0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">prev_hash</span><span class="p">:</span> <span class="s2">&quot;A14F863D347E37B54DD68BB12251A74FE06EA0623DC40856EBC81942B63001FE&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">timestamp</span><span class="p">:</span> <span class="sx">~N[2018-01-14 10:27:07.874129]</span><span class="p">},</span>
</span><span class='line'> <span class="p">%</span><span class="nc">Block</span><span class="p">{</span><span class="ss">data</span><span class="p">:</span> <span class="s2">&quot;MESSAGE 1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">hash</span><span class="p">:</span> <span class="s2">&quot;A14F863D347E37B54DD68BB12251A74FE06EA0623DC40856EBC81942B63001FE&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">prev_hash</span><span class="p">:</span> <span class="s2">&quot;BDC59FEE8F9239579CB4A29828F5F19B081EF3D34A99331E898B22CDDA7922F0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">timestamp</span><span class="p">:</span> <span class="sx">~N[2018-01-14 10:26:40.121790]</span><span class="p">},</span>
</span><span class='line'> <span class="p">%</span><span class="nc">Block</span><span class="p">{</span><span class="ss">data</span><span class="p">:</span> <span class="s2">&quot;ZERO_DATA&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">hash</span><span class="p">:</span> <span class="s2">&quot;BDC59FEE8F9239579CB4A29828F5F19B081EF3D34A99331E898B22CDDA7922F0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">prev_hash</span><span class="p">:</span> <span class="s2">&quot;ZERO_HASH&quot;</span><span class="p">,</span> <span class="ss">timestamp</span><span class="p">:</span> <span class="sx">~N[2018-01-14 10:25:25.936002]</span><span class="p">}]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># Validate the Blockchain</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">&gt;</span> <span class="nc">Blockchain</span><span class="p">.</span><span class="n">valid?</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
</span><span class='line'><span class="no">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Concluding Notes</h2>

<p>That&rsquo;s it for our simple blockchain. I hope that gave you a somewhat basic idea of how a
blockchain works. Of course there&rsquo;s a lot more we can do, such as:</p>

<ul>
<li>Use some kind of data store to maintain state</li>
<li>Or better yet, use Ecto (with or without a database) to take advantage of its changesets
and <a href="https://github.com/sheharyarn/dbfs/blob/9233941c7c3ddc41676762789bc8aa0599ba369f/lib/dbfs/block/block.ex#L33-L39">validations</a></li>
<li>Employ Public-Key Cryptography and <a href="https://github.com/sheharyarn/dbfs/blob/9233941c7c3ddc41676762789bc8aa0599ba369f/lib/dbfs/crypto.ex#L23-L36">sign blocks</a> before hashing them</li>
<li>Implement a <a href="https://github.com/sheharyarn/dbfs/blob/9233941c7c3ddc41676762789bc8aa0599ba369f/lib/dbfs/json.ex#L23-L53">custom encoding scheme</a> in a certain order to always guarantee
the same hash for a given map (For example, <a href="https://github.com/devinus/poison/issues/21">Maps in Elixir are unordered</a>
and the hash generated would almost never be the same as one generated in another language
for the same values)</li>
</ul>


<p>With the powerful Erlang Virtual Machine, we can also do some fancy stuff:</p>

<ul>
<li>Have a distributed network of nodes running the blockchain</li>
<li>Maintaining Blockchain state in Mnesia across many nodes</li>
<li>Broadcast new blocks to the entire network</li>
<li>Perform state consensus and implement conflict resolution</li>
</ul>


<p>Here are some other blockchain &amp; elixir related resources and projects:</p>

<ul>
<li><a href="https://medium.com/@lhartikk/a-blockchain-in-200-lines-of-code-963cc1cc0e54#.dttbm9afr5">Blog Post: Blockchain in 200 lines of code</a></li>
<li><a href="https://elixirforum.com/t/the-blockchain-distributed-ledger-technology/451">ElixirForum: Blockchain Discussion</a></li>
<li><a href="https://github.com/eduardonunesp/ex_chain">Github: ExChain</a> &ndash; A simple blockchain implementation in ELixir</li>
<li><a href="https://github.com/robinmonjo/coincoin">Github: CoinCoin</a> &ndash; Amazing cryptocurrency proof-of-concept in Elixir by @robinmonjo</li>
<li><a href="http://www.petecorey.com/blog/2017/09/18/exploring-the-bitcoin-blockchain-with-elixir-and-phoenix/">Blog Post: Exploring Bitcoin Blockchain with Phoenix</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using LibSVM in Java]]></title>
    <link href="https://sheharyar.me/blog/using-libsvm-in-java/"/>
    <updated>2017-12-15T12:28:39-05:00</updated>
    <id>https://sheharyar.me/blog/using-libsvm-in-java</id>
    <content type="html"><![CDATA[<p>For the past couple of months, I&rsquo;ve been trying to get my feet wet with machine learning
and started work on implementing a Behavioral Authentication mechanism for Android devices
using <a href="https://medium.com/machine-learning-101/chapter-2-svm-support-vector-machine-theory-f0812effc72">Support Vector Machines</a> (more on that later in another blog post). SVM
is a relatively popular classifier which seemed appropriate for a beginner like me, and
everything did go well until I had to implement the R prototype in Java.</p>

<!-- more -->


<p>I went with One-Class SVM for modelling purposes, and the obvious choice was the <code>libsvm</code>
<a href="https://www.csie.ntu.edu.tw/~cjlin/libsvm/">library by Chih-Jen Lin</a>, but there&rsquo;s virtually no documentation for the Java
version either on their <a href="https://www.csie.ntu.edu.tw/~cjlin/libsvm/">homepage</a> or <a href="https://github.com/cjlin1/libsvm/">Github</a>, simply referencing
their C documentation for Java implementations. So after digging through all of their Java
examples, I had a basic version of my port ready, but it gave wildly different results
compared to the R version.</p>

<p>Turns out you need to scale and normalize all data values between <code>0</code> and <code>1</code>, at least for
<code>OC-SVM</code>. These are the <code>double</code> values using which you construct the <code>svm_node</code> 2D Array
<code>x</code> in the <code>svm_problem</code> object. Without doing this, the classifier just goes bat-shit
crazy and just spits out random values. I imagine the R version of the library does that
automatically the for given data. Other than that, you also don&rsquo;t need to have an extra
<code>svm_node</code> object with an index of <code>-1</code> at the end of the <code>x[]</code> arrays to denote the end
of the vector (like the C version).</p>

<p>For running the One-Class classifier, everything else was pretty much same as the C code
or the available <a href="https://github.com/cjlin1/libsvm/blob/master/java/svm_toy.java">Java examples</a>, but I would usually use some sort of helper
function to build the node arrays. For example, for building 2D points on a plane, I used
something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">svm_node</span><span class="o">[]</span> <span class="nf">buildPoint</span><span class="o">(</span><span class="kt">double</span> <span class="n">x</span><span class="o">,</span> <span class="kt">double</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">svm_node</span><span class="o">[]</span> <span class="n">point</span> <span class="o">=</span> <span class="k">new</span> <span class="n">svm_node</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// x</span>
</span><span class='line'>    <span class="n">point</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">svm_node</span><span class="o">();</span>
</span><span class='line'>    <span class="n">point</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">index</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="n">point</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">value</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// y</span>
</span><span class='line'>    <span class="n">point</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">svm_node</span><span class="o">();</span>
</span><span class='line'>    <span class="n">point</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">index</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>    <span class="n">point</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">value</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">point</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Combine many of these together and you get the 2D array <code>svm_node[][]</code> we need for the
SVM problem. Building the model is pretty straight-forward (use your own gamma &amp; nu values
depending on your data):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">svm_model</span> <span class="nf">buildModel</span><span class="o">(</span><span class="n">svm_node</span><span class="o">[][]</span> <span class="n">nodes</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Build Parameters</span>
</span><span class='line'>    <span class="n">svm_parameter</span> <span class="n">param</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">svm_parameter</span><span class="o">();</span>
</span><span class='line'>    <span class="n">param</span><span class="o">.</span><span class="na">svm_type</span>    <span class="o">=</span> <span class="n">svm_parameter</span><span class="o">.</span><span class="na">ONE_CLASS</span><span class="o">;</span>
</span><span class='line'>    <span class="n">param</span><span class="o">.</span><span class="na">kernel_type</span> <span class="o">=</span> <span class="n">svm_parameter</span><span class="o">.</span><span class="na">RBF</span><span class="o">;</span>
</span><span class='line'>    <span class="n">param</span><span class="o">.</span><span class="na">gamma</span>       <span class="o">=</span> <span class="mf">0.802</span><span class="o">;</span>
</span><span class='line'>    <span class="n">param</span><span class="o">.</span><span class="na">nu</span>          <span class="o">=</span> <span class="mf">0.1608</span><span class="o">;</span>
</span><span class='line'>    <span class="n">param</span><span class="o">.</span><span class="na">cache_size</span>  <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Build Problem</span>
</span><span class='line'>    <span class="n">svm_problem</span> <span class="n">problem</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">svm_problem</span><span class="o">();</span>
</span><span class='line'>    <span class="n">problem</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">;</span>
</span><span class='line'>    <span class="n">problem</span><span class="o">.</span><span class="na">l</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>    <span class="n">problem</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">prepareY</span><span class="o">(</span><span class="n">nodes</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Build Model</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">svm</span><span class="o">.</span><span class="na">svm_train</span><span class="o">(</span><span class="n">problem</span><span class="o">,</span> <span class="n">param</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">double</span><span class="o">[]</span> <span class="nf">prepareY</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">double</span><span class="o">[]</span> <span class="n">y</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">double</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>        <span class="n">y</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For classificiation, there&rsquo;s the <code>svm.svm_predict(model, nodes)</code> function that returns
either a <code>-1</code> or <code>+1</code> for one-class, but there&rsquo;s another method available:
<code>svm.svm_predict_values(m, n, v)</code> that can give you a prediction confidence score used
to return the positive or negative one. For <code>RBF</code>, this score means the distance from
the center of the elliptical hyperplane drawn during modelling. Getting this &ldquo;score&rdquo; is
a bit different since this function itself also returns either a <code>-1</code> or <code>+1</code>. You have
to pass a 2-element array as the third argument to this function. After calling it, the
first value of the array will contain the score:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">predict</span><span class="o">(</span><span class="n">svm_model</span> <span class="n">model</span><span class="o">,</span> <span class="n">svm_node</span><span class="o">[]</span> <span class="n">nodes</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">double</span><span class="o">[]</span> <span class="n">scores</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">double</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="n">svm</span><span class="o">.</span><span class="na">svm_predict_values</span><span class="o">(</span><span class="n">model</span><span class="o">,</span> <span class="n">nodes</span><span class="o">,</span> <span class="n">values</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">scores</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I really hope someone writes a better version/wrapper of LibSVM in Java, or improves the
documentation so beginners like me can avoid wasting hours over implementation issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding GenStage in Elixir]]></title>
    <link href="https://sheharyar.me/blog/understanding-genstage-elixir/"/>
    <updated>2017-10-03T18:20:13-04:00</updated>
    <id>https://sheharyar.me/blog/understanding-genstage-elixir</id>
    <content type="html"><![CDATA[<p>GenServers are an amazing part of the OTP ecosystem, helping solve a lot of complicated tasks
easily in Elixir. But working with multiple sets of GenServers together and exchanging data
between them has always been a hassle. <a href="https://hexdocs.pm/elixir/GenEvent.html">GenEvent</a> solved these problems to some
extent, but it did not provide support for backpressure or concurrency. This is where
<a href="https://github.com/elixir-lang/gen_stage">GenStage</a> comes in.</p>

<!-- more -->


<p>Last year <a href="https://elixir-lang.org/blog/2016/07/14/announcing-genstage/">announced on the official Elixir blog</a>, GenStage is a new behaviour
in the OTP family, built on top of GenServers. It is described as:</p>

<blockquote><p>GenStage is a specification for exchanging events with back-pressure between Elixir
producers and consumers</p></blockquote>

<p>but that doesn&rsquo;t convey its full power. The name hides the real meaning; instead of simple
producers and consumers, imagine concurrent stages in a pipeline that takes an arbitrary
number of input events, perform some operations on them and send them to the next stage.
Each stage can consume and produce many events at once, with multiple instances of each
stage running at the same time. The producers can produce as many events as they want, and
the consumers can consume them according to their demand with ease, with the behavior
handling the bulk of the logic.</p>

<p>A simple use-case of GenStage would look like a straight-forward pipeline like this:</p>

<p><img src="https://i.imgur.com/4RvaWBU.png" alt="GenStage Simple Use-case" /></p>

<p>But that doesn&rsquo;t do it justice, instead you should think about each stage having many
concurrent instances like this:</p>

<p><img src="https://i.imgur.com/ddCa8kP.png" alt="GenStage Concurrent Instances" /></p>

<p>This is possible due to another behavior shipped with the library, called <code>ConsumerSupervisor</code>.
ConsumerSupervisors allow, well, supervision of multiple consumers or producer-consumers
for better reliability and fault-tolerance. For code examples, I would suggest you check
out the project on <a href="https://github.com/elixir-lang/gen_stage">Github</a>, the excellent documentation on <a href="https://hexdocs.pm/gen_stage/GenStage.html">Hexdocs</a> or
the <a href="https://github.com/elixir-lang/flow">Flow</a> library (which is an amazing implementation of GenStage!). But there are
some things you should take care of when working with GenStages in Elixir (that I had to
learn the hard way):</p>

<ul>
<li>Don&rsquo;t excessively produce events when there is no demand</li>
<li>If a long-running producer yields zero events when there is consumer demand, you have to
explicitly retry producing events again. Otherwise, it would just stop. A common case where
this would happen is, integration with external message queues</li>
<li>Use <code>Supervisor</code> for simple pipelines, and <code>ConsumerSupervisor</code> when dealing with concurrent
instances of a GenStage</li>
<li>Try to define explicit demands for consumers</li>
<li>Start the stages in order, and immediately subscribe to the previous stage for <code>consumers</code>
and <code>producer_consumers</code>, preferably in the <code>init/1</code> callback</li>
<li>Maintining overall demand in a producers&#8217; internal state is a good idea</li>
</ul>


<p>Here are some other excellent posts on the topic:</p>

<ul>
<li><a href="https://elixirschool.com/en/lessons/advanced/gen-stage/">Elixir School: GenStage</a></li>
<li><a href="https://engineering.spreedly.com/blog/how-do-i-genstage.html">How do I GenStage?</a></li>
<li><a href="https://alexgaribay.com/2017/04/25/using-genstage-for-a-batching-pipeline/">Using GenStage for Batch Processing</a></li>
<li><a href="http://tomasztomczyk.com/2017/01/17/genstage-for-processing-jobs.html">GenStage for Processing Jobs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean Atom Parameters in Phoenix]]></title>
    <link href="https://sheharyar.me/blog/cleaner-request-params-elixir-web-apps/"/>
    <updated>2017-09-05T22:09:43-04:00</updated>
    <id>https://sheharyar.me/blog/cleaner-request-params-elixir-web-apps</id>
    <content type="html"><![CDATA[<p>One thing I&rsquo;ve always hated about working with Phoenix is the fact that I have to
use strings to reference web request parameters in controllers. To any other
developer, this might sound silly or even insane, but to my OCD-riddled brain,
this is pure agony:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># web/controllers/some_controller.ex</span>
</span><span class='line'>
</span><span class='line'><span class="kd">def</span> <span class="n">show</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">&quot;id&quot;</span> <span class="p">=&gt;</span> <span class="n">id</span><span class="p">})</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># do something</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>I guess I would&rsquo;ve never even thought about using Atoms for parameters if I
wasn&rsquo;t already used to symbols in Rails:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">][</span><span class="ss">:title</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>To solve this &ldquo;problem&rdquo;, I&rsquo;ve been using a custom plug in my Elixir applications
for the past few months, that essentially symbolizes (or &ldquo;atomizes&rdquo;) all keys in
the <code>params</code> map in controllers. After some input from other Elixir developers,
and major security improvements, I published it as a <a href="https://github.com/sheharyarn/better_params">package on Hex</a>,
called <code>BetterParams</code>, allowing you to do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">create</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="ss">id</span><span class="p">:</span> <span class="n">id</span><span class="p">,</span> <span class="ss">post</span><span class="p">:</span> <span class="p">%{</span><span class="ss">title</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="n">body</span><span class="p">}})</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># or this: params[:post][:title]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Implementation uses <a href="https://hexdocs.pm/elixir/String.html#to_existing_atom/1"><code>String.to_existing_atom</code></a> to <a href="https://engineering.klarna.com/monitoring-erlang-atoms-c1d6a741328e">prevent against
Erlang atom table DoS attacks</a>, and keeps the existing String keys
so you can continue to use them if you want.</p>

<p>Check out the project on <a href="https://github.com/sheharyarn/better_params">Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Background Job Processing in Elixir With Que]]></title>
    <link href="https://sheharyar.me/blog/elixir-job-processing-with-que/"/>
    <updated>2017-07-16T19:54:07-04:00</updated>
    <id>https://sheharyar.me/blog/elixir-job-processing-with-que</id>
    <content type="html"><![CDATA[<p>Elixir and Erlang provide a simple yet powerful set of features for data sharing,
reliability and fault-tolerance, commonly known together as OTP. These consist of
modules and behaviors such as GenServers and Supervisors among many others,
providing an easy and efficient way to design reliable background processes
without too much work.</p>

<p>There already are excellent background job processing libraries for Elixir, such
as <a href="https://github.com/akira/exq">Exq</a> and <a href="https://github.com/joakimk/toniq">Toniq</a>, that make use of them to provide an interface
for working with background job workers, to developers unfamiliar with OTP. But
all of these libraries are either excessively complicated, have dependence on
external programs and binaries such as Redis, or both.</p>

<!-- more -->


<p><a href="https://github.com/sheharyarn/que"><img src='https://i.imgur.com/Eec71eh.png' alt='Que' width='200px' /></a></p>

<p>Why would you lock yourself in with an external service, when Erlang itself ships
with an extremely fast, distributed real-time datastore, called <code>Mnesia</code>? So,
after a few months of hard work and testing it in multiple Elixir applications in
production, I am proud to announce <a href="https://github.com/sheharyarn/que">Que</a>. Que is an extemely easy to use
background job processing library for Elixir, that&rsquo;s backed by Mnesia. Taking
inspiration from intuitive job processing libraries in Ruby, Que&rsquo;s complete
setup takes less than a minute, and you can start writing job workers with almost
zero boilerplate or gibberish:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">App.Workers.ImageConverter</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Que.Worker</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">perform</span><span class="p">(</span><span class="n">image</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nc">ImageTool</span><span class="p">.</span><span class="n">save_resized_copy!</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="ss">:thumbnail</span><span class="p">)</span>
</span><span class='line'>    <span class="nc">ImageTool</span><span class="p">.</span><span class="n">save_resized_copy!</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="ss">:medium</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding support for concurrency is also easy-as-pie, one argument and you&rsquo;re done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kn">use</span> <span class="nc">Que.Worker</span><span class="p">,</span> <span class="ss">concurrency</span><span class="p">:</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>Que makes use of powerful Elixir and OTP features, such as:</p>

<ul>
<li>Pattern Matching</li>
<li>Worker Supervision</li>
<li>Job Success Callbacks</li>
<li>Failure Recovery and Callback</li>
<li>Concurrency</li>
<li>In-Memory and On-Disk storage</li>
</ul>


<p>By default, Que automatically configures the application to store all jobs in
memory, but you can persist them across application restarts using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mix que.setup
</span></code></pre></td></tr></table></div></figure>


<p>Check out the project on <a href="https://github.com/sheharyarn/que">Github</a> and <a href="https://hexdocs.pm/que">Hexdocs</a> for more details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crossing 25k Reputation on StackOverflow]]></title>
    <link href="https://sheharyar.me/blog/crossing-25k-reputation-stackoverflow/"/>
    <updated>2017-04-14T13:47:12-04:00</updated>
    <id>https://sheharyar.me/blog/crossing-25k-reputation-stackoverflow</id>
    <content type="html"><![CDATA[<p>I have always loved contributing back to the developer community in any
way I can. And that&rsquo;s why I spend so much time open-sourcing projects,
organizing developer conferences &amp; hackathons, writing blog posts and
even answering questions on StackOverflow.</p>

<p>This week I got a pleasant surprise when I noticed that I gained the
highest possible privilege level on the site (i.e. access to private
Stackoverflow analytics), after crossing <a href="https://stackoverflow.com/users/1533054/sheharyar">25,000 in reputation
points</a>.</p>

<!-- more -->


<p><a href="https://stackoverflow.com/users/1533054/sheharyar"><img src="https://stackexchange.com/users/flair/1665580.png" width="208" height="58" alt="profile for Sheharyar on Stack Exchange, a network of free, community-driven Q&amp;A sites" title="profile for Sheharyar on Stack Exchange, a network of free, community-driven Q&amp;A sites" /></a></p>

<p><a href="https://stackoverflow.com/users/1533054/sheharyar"><img src="https://stackoverflow.com/users/flair/1533054.png" width="208" height="58" alt="profile for Sheharyar at Stack Overflow, Q&amp;A for professional and enthusiast programmers" title="profile for Sheharyar at Stack Overflow, Q&amp;A for professional and enthusiast programmers"></a></p>

<p>Yep, you read that right! 25,000 points! With over 55+ questions, 180+
answers, 3500+ votes cast, 100+ edits and a reach of over 1.5 million
people, it took me a long time getting here since I first created my
profile back in July 2012. (Admittedly, I tried to game the system in
the beginning, but was quickly caught and reprimanded – I&rsquo;ve since
focused on only asking questions for things I didn&rsquo;t know, and answering
them for which I did). Nothing says happiness like Fake Internet Points™;
just look at this glorius graph showing my journey on the StackExchange
network:</p>

<p><a href="https://stackexchange.com/users/1665580/sheharyar?tab=reputation"><img src="https://i.imgur.com/LwMCkTL.png" alt="Reputation Graph" /></a></p>

<p>As a side note, I&rsquo;m also currently fluctuating around the 10th position
in the <a href="http://data.stackexchange.com/stackoverflow/query/370021/top-100-users-from-pakistan">Top 100 users from Pakistan</a> list on StackExchange Data.
I hope that I would continue helping developers out in the future, using
amazing platforms like StackOverflow!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EctoRut - Simple Ecto Shortcuts to Make Your Life Easier]]></title>
    <link href="https://sheharyar.me/blog/ecto-rut-simple-model-shortcuts/"/>
    <updated>2017-03-05T07:31:22-05:00</updated>
    <id>https://sheharyar.me/blog/ecto-rut-simple-model-shortcuts</id>
    <content type="html"><![CDATA[<p>A few months back, I published an Elixir package called <a href="https://github.com/sheharyarn/ecto_rut"><code>Ecto.Rut</code></a>.
Ecto.Rut lets you call <code>Ecto.Repo</code> methods directly on the Model itself instead
of passing your Model as an argument to each <code>Repo</code> method call.</p>

<p>While the project&rsquo;s Readme and <a href="https://hexdocs.pm/ecto_rut/Ecto.Rut.html">Documentation</a> are self-sufficient in
getting you started, I wanted to write about my motivation for creating the
package in the first place.</p>

<!-- more -->


<h2>Quick Introduction</h2>

<p>Ecto.Rut is simply a wrapper around <code>Ecto.Repo</code>, so it can let you do awesome
things like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nc">Post</span><span class="p">.</span><span class="n">all</span>
</span><span class='line'><span class="c1"># instead of YourApp.Repo.all(Post)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Post</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="c1"># instead of YourApp.Repo.get(Post, 2)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Post</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="c1"># instead of YourApp.Repo.delete(Post, 5)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Post</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Awesome Post&quot;</span><span class="p">,</span> <span class="ss">slug</span><span class="p">:</span> <span class="s2">&quot;awesome-post&quot;</span><span class="p">,</span> <span class="ss">category_id</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="c1"># instead of:</span>
</span><span class='line'><span class="c1"># changeset = Post.changeset(%Post{}, %{title: &quot;Awesome Post&quot;, slug: &quot;awesome-post&quot;, category_id: 3})</span>
</span><span class='line'><span class="c1"># YourApp.Repo.insert(changeset)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Well, you get the idea</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Motivation</h2>

<p>As I improved my Elixir skills, I needed to be better familiar with <code>Macros</code> and
Metaprogramming in general (see my talk on <a href="https://sheharyar.me/blog/talk-introduction-to-elixir/">Introduction to Elixir</a>),
and it all started with random experiments in Elixir Macros. At the same time,
working on my Phoenix applications, I grew tired of calling <code>Repo</code> methods for
even the simplest database queries on my models and missed the <em>Rails-y</em> way of
calling <code>Model.find</code>, <code>Model.update</code>, etc. I saw that (some) other developers
on the Elixir Forum felt the same way too.</p>

<p>I took this as an opportunity to publish my first Hex Package, while refining
my Elixir skills at the same time. The goal of the project here is to not to
fully replace <code>Ecto.Repo</code> calls in your app, but to reduce code repetition
and simplify and speed up development.</p>

<p>For complex queries, it&rsquo;s highly recommended that you use the original <code>Ecto.Repo</code>
calls and not this package.</p>

<h2>Implementation</h2>

<p>Ecto.Rut is implemented as a simple <code>behaviour</code> using Macros that can be activated
by calling the <code>use</code> construct. The basic structure of the code looks something
like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Ecto.Rut</span> <span class="k">do</span>
</span><span class='line'>  <span class="kd">defmacro</span> <span class="n">__using__</span><span class="p">(</span><span class="n">opts</span> <span class="p">\\</span> <span class="p">[])</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">quote</span> <span class="ss">bind_quoted</span><span class="p">:</span> <span class="p">[</span><span class="ss">opts</span><span class="p">:</span> <span class="n">opts</span><span class="p">]</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">def</span> <span class="n">all</span><span class="p">,</span>              <span class="ss">do</span><span class="p">:</span> <span class="n">call</span><span class="p">(</span><span class="ss">:all</span><span class="p">,</span>    <span class="p">[</span><span class="na">@model</span><span class="p">])</span>
</span><span class='line'>      <span class="kd">def</span> <span class="n">get</span><span class="p">(</span><span class="n">id</span><span class="p">),</span>          <span class="ss">do</span><span class="p">:</span> <span class="n">call</span><span class="p">(</span><span class="ss">:get</span><span class="p">,</span>    <span class="p">[</span><span class="na">@model</span><span class="p">,</span> <span class="n">id</span><span class="p">])</span>
</span><span class='line'>      <span class="kd">def</span> <span class="n">delete</span><span class="p">(</span><span class="n">struct</span><span class="p">),</span>   <span class="ss">do</span><span class="p">:</span> <span class="n">call</span><span class="p">(</span><span class="ss">:delete</span><span class="p">,</span> <span class="p">[</span><span class="n">struct</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">defp</span> <span class="n">call</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="n">args</span> <span class="p">\\</span> <span class="p">[])</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">apply</span><span class="p">(</span><span class="na">@repo</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The gist above is just an example, not the <a href="https://github.com/sheharyarn/ecto_rut">full code</a>. But it does convey
how  powerful Macros in Elixir truly are. Abstraction over abstraction leads to
beautifully simple code without comprimising any of the performance and giving
rise to creative solutions at the same time.</p>

<p>I don&rsquo;t have much else to say about the topic, but the beauty and flexibility of the
Elixir language keeps surprising me every now and then.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk: Remote Access Trojans]]></title>
    <link href="https://sheharyar.me/blog/talk-remote-access-trojans/"/>
    <updated>2017-02-25T11:34:48-05:00</updated>
    <id>https://sheharyar.me/blog/talk-remote-access-trojans</id>
    <content type="html"><![CDATA[<p>A few days back, I gave a talk to a relatively non-technical audience on the topic of
Remote Access Trojans, to help them better understand some of the serious security and
privacy threats out there. I decided to go with RATs because of their serious exploitative
nature and the relatable consequences of being lax with the security of your personal
systems.</p>

<!-- more -->




<div class='video-container'>
<div class='video-embed' style='width: 700px'>
  <script async class="speakerdeck-embed" data-id="d738c37ac86a45ce933023b9a9f27f42" data-ratio="1.77777777777778" src="https://sheharyar.me//speakerdeck.com/assets/embed.js"></script>
</div>
</div>


<p>I&rsquo;ve intentionally left a lot of topics out of the presentation and casually mentioned
or ignored some things that would outrage security professionals. If you feel the same
way while going through the presentation, then this is clearly not for you. I&rsquo;ve tried
my best to convey these concepts in simple manner and demo it along with it, while being
simply a computer security enthusiast.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Axios for Network Requests in React]]></title>
    <link href="https://sheharyar.me/blog/axios-with-react-for-making-requests/"/>
    <updated>2017-01-17T09:27:52-05:00</updated>
    <id>https://sheharyar.me/blog/axios-with-react-for-making-requests</id>
    <content type="html"><![CDATA[<p>Before jumping ship to React, I had been working on Angular for a long time
and really enjoyed building great SPAs in the <a href="https://toddmotto.com/killing-it-with-angular-directives-structure-and-mvvm/">MVVM Pattern</a>. One of my
favorite things was the services architecture of making requests. I&rsquo;ve tried
to recreate the pattern using <a href="https://github.com/mzabriskie/axios">Axios</a>, which you can use in React or any
other frontend framework.</p>

<!-- more -->


<p>First, let&rsquo;s define a custom wrapper around <code>Axios</code> for our application. This
can contain our global configuration such as the base API url, header defaults
and more:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">axios</span>     <span class="nx">from</span> <span class="s1">&#39;axios&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">constants</span> <span class="nx">from</span> <span class="s1">&#39;shared/constants&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Create an Axios Client with defaults</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">baseURL</span><span class="o">:</span> <span class="nx">constants</span><span class="p">.</span><span class="nx">api</span><span class="p">.</span><span class="nx">url</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Request Wrapper with default success/error actions</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">onSuccess</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;Request Successful!&#39;</span><span class="p">,</span> <span class="nx">response</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">onError</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Request Failed:&#39;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Request was made but server responded with something</span>
</span><span class='line'>      <span class="c1">// other than 2xx</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Status:&#39;</span><span class="p">,</span>  <span class="nx">error</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Data:&#39;</span><span class="p">,</span>    <span class="nx">error</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Headers:&#39;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">headers</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Something else happened while setting up the request</span>
</span><span class='line'>      <span class="c1">// triggered the error</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Error Message:&#39;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">response</span> <span class="o">||</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">client</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">onSuccess</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">onError</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">request</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Making Requests using Services</h2>

<p>To make a simple request, we can use something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">request</span> <span class="nx">from</span> <span class="s1">&#39;shared/lib/request&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">request</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/path/&#39;</span>
</span><span class='line'><span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">resp</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">resp</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>But the ideal way to use it is to create a separate <code>service</code> for each resource
that should be responsible for handling all API calls of that model. For example,
for a <code>Message</code> class, we can create a <code>MessageService</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// services/api/message.js</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">request</span> <span class="nx">from</span> <span class="s1">&#39;shared/lib/request&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">get</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">request</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span>    <span class="err">`</span><span class="o">/</span><span class="nx">message</span><span class="o">/</span><span class="nx">$</span><span class="p">{</span><span class="nx">id</span><span class="p">}</span><span class="err">`</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">create</span><span class="p">({</span><span class="nx">subject</span><span class="p">,</span> <span class="nx">content</span><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">request</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span>    <span class="s1">&#39;/message/create&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">data</span><span class="o">:</span>   <span class="p">{</span>
</span><span class='line'>      <span class="nx">subject</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">content</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">MessageService</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">get</span><span class="p">,</span> <span class="nx">create</span> <span class="c1">//, update, delete, etc. ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">MessageService</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then call these methods from any other module/view/component:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">MessageService</span> <span class="nx">from</span> <span class="s1">&#39;services/api/message&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Message</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">handleSubmit</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="p">{</span><span class="nx">subject</span><span class="p">,</span> <span class="nx">message</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">MessageService</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="nx">subject</span><span class="p">,</span> <span class="nx">message</span><span class="p">})</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="err">`</span><span class="nx">New</span> <span class="nx">Message</span> <span class="kd">with</span> <span class="nx">id</span> <span class="nx">$</span><span class="p">{</span><span class="nx">response</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span> <span class="nx">created</span><span class="o">!</span><span class="err">`</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Other stuff...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polymorphic Paperclip Attachments With Partial ActiveRecord Index]]></title>
    <link href="https://sheharyar.me/blog/polymorphic-paperclip-attachments-partial-index/"/>
    <updated>2016-12-15T06:44:06-05:00</updated>
    <id>https://sheharyar.me/blog/polymorphic-paperclip-attachments-partial-index</id>
    <content type="html"><![CDATA[<p>A common pattern in Rails applications with Image Attachments is to create a
separate model for the Image and use it in Polymorphic relationships with
other models. Since more often than not an object has more than one image
attached with a default one, the classic way of storing a <code>default_image_id</code>
on the parent model can quickly result in code duplication and spaghetti
through out the rails application.</p>

<p>A better solution is to specify a <code>default</code> boolean on the Image model itself
and use partial indexes for proper scoping.</p>

<!-- more -->


<p>To DRY up the code even further, we can use the Concern Model pattern.
<a href="https://www.viget.com/articles/slimming-down-your-models-and-controllers">This Blog Post</a> on Viget is an excellent primer on using Concerns. I&rsquo;m
using Rails 5, Postgres &amp; Paperclip and will use the class
name <code>ImageAttachment</code> through out the article.</p>

<p>Start by creating a migration for your Image model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># db/migrations/xxxxxxxxxxxxxx_create_image_attachment.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CreateImageAttachments</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span><span class="o">[</span><span class="mi">5</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:image_attachments</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">belongs_to</span> <span class="ss">:imageable</span><span class="p">,</span> <span class="ss">polymorphic</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">attachment</span> <span class="ss">:data</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">boolean</span>    <span class="ss">:default</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">add_index</span> <span class="ss">:image_attachments</span><span class="p">,</span> <span class="o">[</span><span class="ss">:imageable_id</span><span class="p">,</span> <span class="ss">:imageable_type</span><span class="p">,</span> <span class="ss">:default</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">unique</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">where</span><span class="p">:</span>  <span class="s1">&#39;&quot;default&quot; = TRUE&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">name</span><span class="p">:</span>   <span class="ss">:unique_on_imageable_default</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates an ordinary table with a Paperclip attachment and a <code>default</code>
boolean field. But notice the specifics of the unique <code>index</code> above; it&rsquo;s a
partial index only on the rows where the value of <code>default</code> is true. This
validates that there is only one default image for any given object at a time.</p>

<p>In the <code>ImageAttachment</code> model itself, we can set a conditional uniqueness
on the <code>imageable</code> scope. This validates the same in the Rails application
too:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/image_attachment.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ImageAttachment</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:imageable</span><span class="p">,</span> <span class="ss">polymorphic</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_attached_file</span> <span class="ss">:data</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">styles</span><span class="p">:</span>          <span class="p">{</span> <span class="ss">thumb</span><span class="p">:</span>  <span class="s1">&#39;120x120#&#39;</span><span class="p">,</span>            <span class="ss">medium</span><span class="p">:</span> <span class="s1">&#39;600x600&gt;&#39;</span>           <span class="p">},</span>
</span><span class='line'>    <span class="ss">convert_options</span><span class="p">:</span> <span class="p">{</span> <span class="ss">thumb</span><span class="p">:</span>  <span class="s1">&#39;-quality 75 -strip&#39;</span><span class="p">,</span>  <span class="ss">medium</span><span class="p">:</span> <span class="s1">&#39;-quality 90 -strip&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates_attachment_presence</span>     <span class="ss">:data</span>
</span><span class='line'>  <span class="n">validates_attachment_size</span>         <span class="ss">:data</span><span class="p">,</span> <span class="ss">less_than</span><span class="p">:</span>    <span class="no">PAPERCLIP_IMAGE_SIZE_LIMIT</span>
</span><span class='line'>  <span class="n">validates_attachment_content_type</span> <span class="ss">:data</span><span class="p">,</span> <span class="ss">content_type</span><span class="p">:</span> <span class="no">PAPERCLIP_IMAGE_CONTENT_TYPE</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Conditional Uniqueness validation on the belongs_to scope</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:default</span><span class="p">,</span> <span class="ss">uniqueness</span><span class="p">:</span> <span class="p">{</span> <span class="ss">scope</span><span class="p">:</span> <span class="ss">:imageable</span> <span class="p">},</span> <span class="k">if</span><span class="p">:</span> <span class="ss">:default?</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Methods to set/unset the default image</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">undefault!</span>
</span><span class='line'>    <span class="n">update</span><span class="p">(</span><span class="ss">default</span><span class="p">:</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">default!</span>
</span><span class='line'>    <span class="n">imageable</span><span class="o">.</span><span class="n">default_image</span><span class="o">.</span><span class="n">undefault!</span> <span class="k">if</span> <span class="n">imageable</span><span class="o">.</span><span class="n">default_image</span>
</span><span class='line'>    <span class="n">update</span><span class="p">(</span><span class="ss">default</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we create an <code>Imageable</code> concern, which defines the relationship
with the <code>ImageAttachment</code> model and provides a <code>default_image</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/concerns/imageable.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Imageable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:image_attachments</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:imageable</span><span class="p">,</span> <span class="ss">dependent</span><span class="p">:</span> <span class="ss">:destroy</span>
</span><span class='line'>    <span class="n">alias_attribute</span> <span class="ss">:images</span><span class="p">,</span> <span class="ss">:image_attachments</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">default_image</span>
</span><span class='line'>    <span class="n">images</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">default</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="o">||</span> <span class="n">images</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, to be able to &ldquo;attach images&rdquo; to any model, all you have to do is to
<code>include Imageable</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Imageable</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Other stuff</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Event</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Imageable</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Other stuff</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using UUIDs With Postgres in Phoenix and Ecto]]></title>
    <link href="https://sheharyar.me/blog/postgres-uuids-phoenix-ecto/"/>
    <updated>2016-09-22T08:54:06-04:00</updated>
    <id>https://sheharyar.me/blog/postgres-uuids-phoenix-ecto</id>
    <content type="html"><![CDATA[<p>Setting up Ecto to use UUIDs instead of the regular integer serial IDs
with PostgreSQL in Phoenix has always been a hassle, as evident from
the numerous blog posts and Stackoverflow questions (<a href="http://terrcin.io/2016/01/17/postgres-uuid-primary-keys-in-phoenix/">1</a>, <a href="https://groups.google.com/forum/#!topic/phoenix-talk/OZaL2nSWUTE">2</a>,
<a href="http://stackoverflow.com/a/30004834/1533054">3</a>, &hellip;). But as of Ecto <code>v2</code> and Phoenix <code>v1.1</code>, you
can pass <code>--binary-id</code> when creating a new Phoenix project to
automatically use UUIDs (or other binary IDs when using different
databases and adapters).</p>

<!-- more -->


<p>When creating a new project with <code>--binary-id</code>, it will automatically
set appropriate values for <code>@primary_key</code> and <code>@foreign_key_type</code>
in your <code>web/web.ex</code>. For Postgres, this means using <a href="https://hexdocs.pm/ecto/Ecto.UUID.html"><code>Ecto.UUID</code></a>
at the back (Ecto handles this automatically):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">def</span> <span class="n">model</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">quote</span> <span class="k">do</span>
</span><span class='line'>    <span class="kn">use</span> <span class="nc">Ecto.Schema</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">import</span> <span class="nc">Ecto</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nc">Ecto.Changeset</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nc">Ecto.Query</span>
</span><span class='line'>
</span><span class='line'>    <span class="na">@primary_key</span> <span class="p">{</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:binary_id</span><span class="p">,</span> <span class="ss">autogenerate</span><span class="p">:</span> <span class="no">true</span><span class="p">}</span>
</span><span class='line'>    <span class="na">@foreign_key_type</span> <span class="ss">:binary_id</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Existing Applications</h2>

<p>If you want to start using UUIDs in your existing Phoenix application,
you need to specify <code>:binary_id</code> in your Ecto migration in addition to
the <code>model</code> method above in <code>web/web.ex</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">create</span> <span class="n">table</span><span class="p">(</span><span class="ss">:posts</span><span class="p">,</span> <span class="ss">primary_key</span><span class="p">:</span> <span class="no">false</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">add</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:binary_id</span><span class="p">,</span> <span class="ss">primary_key</span><span class="p">:</span> <span class="no">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a more detailed solution for existing Phoenix apps, see the
<a href="https://hexdocs.pm/ecto/Ecto.Schema.html#module-primary-keys">Ecto Schema Docs</a> or José&rsquo;s <a href="http://stackoverflow.com/a/30004834/1533054">answer on Stackoverflow</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Simple Chat App With Elixir and Phoenix]]></title>
    <link href="https://sheharyar.me/blog/simple-chat-phoenix-elixir/"/>
    <updated>2016-05-22T12:33:05-04:00</updated>
    <id>https://sheharyar.me/blog/simple-chat-phoenix-elixir</id>
    <content type="html"><![CDATA[<p>The past few years, more and more applications have been transitioning to websockets
for real-time communication, even forcing some frameworks to implement them (such as
<a href="https://github.com/rails/rails/pull/22586">ActionCable in Rails 5</a>). The <a href="http://www.phoenixframework.org/docs/overview">Phoenix Framework</a> for Elixir implements it
natively, without depending on any external programs such as <code>Redis</code>.</p>

<p>Today, we&rsquo;re going to build a super simple chat application in Elixir using the Phoenix
Framework. We&rsquo;re going to ignore authentication, authorization and other features so we
can quickly go over the basics, and get websockets in Elixir running.</p>

<!-- more -->


<h2>Getting Started</h2>

<p>Start by installing <a href="http://elixir-lang.org/install.html">Elixir</a> and <a href="http://www.phoenixframework.org/docs/installation">Phoenix</a>. Optionally, check out my talk on
<a href="https://sheharyar.me/blog/talk-introduction-to-elixir/">Introduction to Elixir</a>. Create a new phoenix project and call it whatever you
like, and start the server so you can see the app in your browser:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Create a new Phoenix project called chatroom</span>
</span><span class='line'><span class="nv">$ </span>mix phoenix.new chatroom
</span><span class='line'>
</span><span class='line'><span class="c"># Start the server</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>chatroom
</span><span class='line'><span class="nv">$ </span>mix phoenix.server
</span></code></pre></td></tr></table></div></figure>


<h2>Creating the View</h2>

<p>Let&rsquo;s start with something easy by writing the markup and CSS for our chat app. Open
<code>web/templates/page/index.html.eex</code>, and replace its contents with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&#39;message-list&#39;</span> <span class="na">class=</span><span class="s">&#39;row&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;row form-group&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;col-md-3&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;text&#39;</span> <span class="na">id=</span><span class="s">&#39;name&#39;</span> <span class="na">class=</span><span class="s">&#39;form-control&#39;</span> <span class="na">placeholder=</span><span class="s">&#39;Name&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;col-md-9&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;text&#39;</span> <span class="na">id=</span><span class="s">&#39;message&#39;</span> <span class="na">class=</span><span class="s">&#39;form-control&#39;</span> <span class="na">placeholder=</span><span class="s">&#39;Message&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve created an empty <code>div</code> that will list all chat messages and two text fields (one
for the user&rsquo;s name and one for the message). Now open <code>web/static/css/app.css</code> and
paste this at the end:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#message-list</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#777</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">400px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">overflow</span><span class="o">:</span> <span class="k">scroll</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Point your browser to <code>localhost:4000</code>, it should look like this:</p>

<p><a href="https://i.imgur.com/xs9NLHH.png"><img src="https://i.imgur.com/xs9NLHH.png" alt="Phoenix Chat Markup Screenshot" /></a></p>

<h2>Setting up a new Channel</h2>

<p>We&rsquo;re going to create a new channel called <code>lobby</code>. Open up <code>web/channels/user_socket.ex</code>
and add this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">channel</span> <span class="s2">&quot;lobby&quot;</span><span class="p">,</span> <span class="nc">Chatroom.LobbyChannel</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a new file called <code>web/channels/lobby_channel.ex</code> and implement the
functionality for the new <code>lobby</code> channel. The <code>join</code> method here always returns
<code>{:ok, socket}</code> to allow all connections to the channel. The <code>handle_in</code> method is
fired every time a new incoming message is received on the socket, which broadcasts
that message to all other open sockets.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="kd">defmodule</span> <span class="nc">Chatroom.LobbyChannel</span> <span class="k">do</span>
</span><span class='line'>  <span class="kn">use</span> <span class="nc">Phoenix.Channel</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">join</span><span class="p">(</span><span class="s2">&quot;lobby&quot;</span><span class="p">,</span> <span class="n">_payload</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">def</span> <span class="n">handle_in</span><span class="p">(</span><span class="s2">&quot;new_message&quot;</span><span class="p">,</span> <span class="n">payload</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">broadcast!</span> <span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;new_message&quot;</span><span class="p">,</span> <span class="n">payload</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Handling the connections on Client-side</h2>

<p>To make things easier, we&rsquo;ll start by adding <code>jQuery</code> to our
<code>web/templates/layouts/app.html.eex</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;&lt;%= static_path(@conn, &quot;</span><span class="err">/</span><span class="na">js</span><span class="err">/</span><span class="na">app</span><span class="err">.</span><span class="na">js</span><span class="err">&quot;)</span> <span class="err">%</span><span class="nt">&gt;</span><span class="err">&quot;</span><span class="o">&gt;</span><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Phoenix comes packed with a simple javascript socket client, but it&rsquo;s disabled
by default. Go into your <code>web/static/js/app.js</code> and uncomment the last line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">socket</span> <span class="nx">from</span> <span class="s2">&quot;./socket&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Go into your <code>web/static/js/socket.js</code> and paste in this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">channel</span> <span class="o">=</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">channel</span><span class="p">(</span><span class="s2">&quot;lobby&quot;</span><span class="p">,</span> <span class="p">{});</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">list</span>    <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#message-list&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#message&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">name</span>    <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#name&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">message</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keypress&#39;</span><span class="p">,</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">==</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">channel</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;new_message&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">name</span><span class="p">.</span><span class="nx">val</span><span class="p">(),</span> <span class="nx">message</span><span class="o">:</span> <span class="nx">message</span><span class="p">.</span><span class="nx">val</span><span class="p">()</span> <span class="p">});</span>
</span><span class='line'>    <span class="nx">message</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">channel</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;new_message&#39;</span><span class="p">,</span> <span class="nx">payload</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">list</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="err">`</span><span class="o">&lt;</span><span class="nx">b</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">{</span><span class="nx">payload</span><span class="p">.</span><span class="nx">name</span> <span class="o">||</span> <span class="s1">&#39;Anonymous&#39;</span><span class="p">}</span><span class="o">:&lt;</span><span class="err">/b&gt; ${payload.message}&lt;br&gt;`);</span>
</span><span class='line'>  <span class="nx">list</span><span class="p">.</span><span class="nx">prop</span><span class="p">({</span><span class="nx">scrollTop</span><span class="o">:</span> <span class="nx">list</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;scrollHeight&quot;</span><span class="p">)});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">channel</span><span class="p">.</span><span class="nx">join</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">receive</span><span class="p">(</span><span class="s2">&quot;ok&quot;</span><span class="p">,</span> <span class="nx">resp</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Joined successfully&quot;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">)</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">receive</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span> <span class="nx">resp</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Unable to join&quot;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">)</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we listen for a <code>keypress</code> event on the message text field. Whenever the user
enters a message, it&rsquo;s pushed on the channel and the text field is cleared. When
there&rsquo;s an incoming message on the channel, it&rsquo;s appended to the div we previously
created and scrolled to the bottom.</p>

<p><a href="https://i.imgur.com/51jlQIO.png"><img src="https://i.imgur.com/51jlQIO.png" alt="Chat app working" /></a></p>

<h2>Going from there</h2>

<p>So far we&rsquo;ve implemented a super simple chat application in Elixir. It&rsquo;s obviously not
perfect and there&rsquo;s alot of stuff missing. The next logical step would be to add some
sort of authentication and authorization, and implement more one-on-one and private
chat rooms.</p>

<p>Here are some links you should check out:</p>

<ul>
<li>Source of <a href="https://github.com/sheharyarn/simple-phoenix-chat">Simple Phoenix Chat</a> on Github</li>
<li><a href="http://www.phoenixframework.org/docs/channels">Guide on Channels</a> on the Official Phoenix website</li>
<li><a href="https://youtu.be/RPs4SHpSThU">Video on Channels</a> by Chris Mccord</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk: Introduction to Elixir]]></title>
    <link href="https://sheharyar.me/blog/talk-introduction-to-elixir/"/>
    <updated>2016-03-02T10:45:28-05:00</updated>
    <id>https://sheharyar.me/blog/talk-introduction-to-elixir</id>
    <content type="html"><![CDATA[<p>For the past 8+ months, I&rsquo;ve been tinkering with the <a href="http://elixir-lang.org/">Elixir Programming Language</a>
and the <a href="http://www.phoenixframework.org/">Phoenix Framework</a>. This was my first experience with a &ldquo;real&rdquo; functional
language and I learned a lot about the paradigm and the ecosystem.</p>

<p>Last week, I had a chance to share my thoughts and experiences with other developers
at the <a href="http://isloojs.com/">Islamabad.js</a> meetup. You can check out the slides below:</p>

<!-- more -->




<div class='video-container'>
<div class='video-embed' style='width: 700px'>
  <script async class="speakerdeck-embed" data-id="25fe787fe84544f0a3278d6af78fae3e" data-ratio="1.77777777777778" src="https://sheharyar.me//speakerdeck.com/assets/embed.js"></script>
</div>
</div>


<p>I still don&rsquo;t consider myself a great elixir developer, much less an expert and still
have a long way to go, but Saša Jurić&rsquo;s <a href="https://www.manning.com/books/elixir-in-action">Elixir in Action</a> and Josh Adam&rsquo;s
<a href="http://elixirsips.com/">ElixirSips</a> were extremely helpful resources to get me here. Do check them out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Google Analytics in Rails 4 With Turbolinks]]></title>
    <link href="https://sheharyar.me/blog/using-google-analytics-in-rails-4-with-turbolinks/"/>
    <updated>2015-03-29T13:24:54-04:00</updated>
    <id>https://sheharyar.me/blog/using-google-analytics-in-rails-4-with-turbolinks</id>
    <content type="html"><![CDATA[<p>There doesn&rsquo;t seem to be a proper way of using Google Analytics in a Rails 4 app when Turbolinks are involved.
So I&rsquo;m just writing here what works for me. I&rsquo;ve written this for the new
<a href="https://support.google.com/analytics/answer/2817075">Google Universal Analytics</a>, and this guide uses the
<a href="https://github.com/slim-template/slim/">Slim Templating Language</a> but you can just as easily use it with <code>erb</code> or <code>haml</code>.</p>

<!-- more -->


<p>Create a <code>_google_analytics.html.slim</code> file in your <code>app/views/layouts</code> folder, and paste in the script you got from
the <a href="http://google.com/analytics">Google Analytics</a> website as is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="p">-</span> <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">production?</span>
</span><span class='line'>    javascript:
</span><span class='line'>        (function(i,s,o,g,r,a,m){i[&#39;GoogleAnalyticsObject&#39;]=r;i[r]=i[r]||function(){
</span><span class='line'>        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
</span><span class='line'>        <span class="nt">m</span><span class="p">=</span><span class="n">s</span><span class="o">.</span><span class="n">getElementsByTagName</span><span class="p">(</span><span class="n">o</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">;</span><span class="n">a</span><span class="o">.</span><span class="n">async</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">a</span><span class="o">.</span><span class="n">src</span><span class="o">=</span><span class="n">g</span><span class="p">;</span><span class="n">m</span><span class="o">.</span><span class="n">parentNode</span><span class="o">.</span><span class="n">insertBefore</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>        })(window,document,&#39;script&#39;,&#39;//www.google-analytics.com/analytics.js&#39;,&#39;ga&#39;);
</span><span class='line'>
</span><span class='line'>        <span class="nt">ga</span>(&#39;create&#39;, &#39;UA-XXXXXXXX-X&#39;, &#39;auto&#39;);
</span><span class='line'>        <span class="nt">ga</span>(&#39;send&#39;, &#39;pageview&#39;);
</span></code></pre></td></tr></table></div></figure>


<p>Now, create a <code>google_analytics.coffee</code> file in your <code>app/assets/javascripts</code> directory, and paste in this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nx">jQuery</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span> <span class="s">&#39;page:change&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">window</span><span class="p">.</span><span class="nx">ga</span><span class="o">?</span>
</span><span class='line'>      <span class="nx">ga</span><span class="p">(</span><span class="s">&#39;set&#39;</span><span class="p">,</span>  <span class="s">&#39;location&#39;</span><span class="p">,</span> <span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s">&#39;#&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>      <span class="nx">ga</span><span class="p">(</span><span class="s">&#39;send&#39;</span><span class="p">,</span> <span class="s">&#39;pageview&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="s">&quot;title&quot;</span><span class="o">:</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This file will track the page again, whenever turbolinks loads a new page. In your <code>application.html.slim</code>, render the layout right before closing the <code>head</code> tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">doctype</span> html
</span><span class='line'><span class="nt">html</span>
</span><span class='line'>  <span class="nt">head</span>
</span><span class='line'>    <span class="nt">title</span> My Rails App
</span><span class='line'>
</span><span class='line'>    <span class="cp">/ Some code...</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">==</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;application&#39;</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:controller</span><span class="o">]</span><span class="p">,</span> <span class="ss">media</span><span class="p">:</span> <span class="s1">&#39;all&#39;</span>
</span><span class='line'>    <span class="p">==</span> <span class="n">render</span> <span class="s1">&#39;layouts/google_analytics&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">body</span>
</span><span class='line'>    <span class="cp">/ Some more code...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, in your <code>application.js</code>, require the <code>coffee</code> file we previously created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require jquery</span>
</span><span class='line'><span class="c1">//= require jquery_ujs</span>
</span><span class='line'><span class="c1">//= require google_analytics</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">someJavascriptStuff</span> <span class="o">=</span> <span class="p">{};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, you&rsquo;re good to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imperative vs. Declarative]]></title>
    <link href="https://sheharyar.me/blog/imperative-vs-declarative/"/>
    <updated>2015-03-19T17:27:44-04:00</updated>
    <id>https://sheharyar.me/blog/imperative-vs-declarative</id>
    <content type="html"><![CDATA[<p>I came across this beautifully detailed post, <a href="http://latentflip.com/imperative-vs-declarative/">Imperative vs. Declarative</a>
by <em>Philip Roberts</em>, and wanted to share my thoughts on the Ruby-way of things (and hopefully get it right).</p>

<!-- more -->


<p>So as Philip explains it:</p>

<blockquote><ul>
<li><strong>Imperative Programming:</strong> Telling the &ldquo;machine&rdquo; how to do something, and as a result what you want to happen will happen</li>
<li><strong>Declarative Programming:</strong> Telling the &ldquo;machine&rdquo; what you would like to happen, and let the computer figure out how to do it</li>
</ul>
</blockquote>

<p>(Where &lsquo;Machine&rsquo; is Computer/database/programming language/etc)</p>

<br />


<h1>Imperative</h1>

<p>Suppose, you have an array of numbers and you want to double every value. If you have recently started Ruby,
you&rsquo;ll probably try doing things the old way; i.e. Iterating over the array, and doubling each value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nums</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">dubs</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">n</span> <span class="k">in</span> <span class="n">nums</span>
</span><span class='line'>    <span class="n">dubs</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>or maybe if you already know about <code>each</code>, you&rsquo;ll go about doing it this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nums</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">dubs</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="n">nums</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>    <span class="n">dubs</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<br />


<h1>Declarative (The Ruby Way)</h1>

<p>Now, the Ruby way of doing things is different (which also happens to be Declarative BTW):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nums</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">dubs</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I on the other hand would take this a level higher to show how cool I am:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Integer</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">double</span>
</span><span class='line'>        <span class="nb">self</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">nums</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">dubs</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:double</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<br />


<h1>Conclusion</h1>

<blockquote><ul>
<li>Loops are Imperative</li>
<li>Map is Declarative</li>
</ul>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Ruby</span> <span class="no">ROOLZ</span><span class="p">,</span> <span class="no">Java</span> <span class="no">DROOLZ</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also this:</p>

<p class='video-container'>
<iframe style='width: 100%; height: auto; min-height: 360px;' src='http://yplay.sheharyar.me/embed/5GpOfwbFRcs' scrolling='NO' frameborder='0' style='overflow:hidden; border: 0px;'  webkitallowfullscreen mozallowfullscreen allowfullscreen ></iframe>
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL vs NoSQL: MongoDB Is Web Scale!]]></title>
    <link href="https://sheharyar.me/blog/sql-vs-nosql-mongodb-is-web-scale/"/>
    <updated>2015-03-10T02:36:17-04:00</updated>
    <id>https://sheharyar.me/blog/sql-vs-nosql-mongodb-is-web-scale</id>
    <content type="html"><![CDATA[<p>While googling for Flamewars between SQL and NoSQL Databases (MongoDB especially), I came across this awesome Video. Although it starts
out slow, I can promise you it will change your stance on the SQL vs NoSQL debate.</p>

<div class='video-container'>
<div class='video-embed'>
    <script type="text/javascript" src="https://sheharyar.me//cdn.sublimevideo.net/js/xa2w0yft.js"></script> 
    <video id="b2F-DItXtZs" class="sublime" width="640" height="360" title="Mongo DB is Web Scale" data-uid="b2F-DItXtZs" data-youtube-id="b2F-DItXtZs" preload="none">
    </video>
</div>
</div>




<!-- more -->




<br/>


<p>Summary of the important points of this video:</p>

<blockquote><ul>
<li><code>/dev/null</code> is the fastest Database out there</li>
<li>Sadly, it doesn&rsquo;t support Sharding</li>
<li>Sharding is the &lsquo;Secret Sauce&rsquo; that makes MongoDB so fast and awesome</li>
<li>MongoDB is Web Scale and SQL is not</li>
<li>MongoDB <em>just works</em></li>
</ul>
</blockquote>

<p>But on a serious note, this video does raise some good points (this coming from a <em>MongoDB Fanboi</em>)</p>

<ul>
<li>SQL isn&rsquo;t what it used to be</li>
<li>Today&rsquo;s relational systems are very mature and extremely powerful</li>
<li>The <em>&ldquo;Doesn&rsquo;t Scale&rdquo;</em> argument doesn&rsquo;t hold anymore. Quoting <em>Jeff Cogswell</em>:</li>
</ul>


<blockquote><p>[Relational DBs are] extremely powerful and can optimize joins and cache them. Huge banks that serve thousands
of branches and millions of customers, including hundreds of thousands of online members, survive just fine using SQL</p></blockquote>

<p>I suggest reading these articles as well:</p>

<ul>
<li><a href="http://news.dice.com/2012/07/16/sql-vs-nosql-which-is-better/">SQL vs. NoSQL: Which Is Better?</a></li>
<li><a href="http://www.mongodb.com/nosql-explained">NoSQL Explained (By MongoDB)</a></li>
</ul>


<br />


<p>Disagree? Have something to add? <a href="http://twitter.com/sheharyarn">Rage on Twitter!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned From the GNU Grep]]></title>
    <link href="https://sheharyar.me/blog/what-i-learned-from-the-gnu-grep/"/>
    <updated>2015-03-05T18:27:12-05:00</updated>
    <id>https://sheharyar.me/blog/what-i-learned-from-the-gnu-grep</id>
    <content type="html"><![CDATA[<p>While going through my <a href="https://news.ycombinator.com/news">HackerNews</a> feed today, I came across this:
<a href="http://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html">Why GNU Grep is Fast</a>. It&rsquo;s an archived
email from Mike Haertel, the original author of the GNU Grep, to Gabor Kovesdan discussing the reasons behind the speed
of the GNU Grep.</p>

<p>The email is filled with great knowledge in easy-to-understand &ldquo;tricks&rdquo;.</p>

<!--more-->


<p>Two of these tricks that speed up Grep, Mike explains, are:</p>

<blockquote><ul>
<li>Grep avoids looking at every Input Byte</li>
<li>Grep executes very few instuctions for each byte it <em>does</em> look at</li>
</ul>
</blockquote>

<p>Other great lessons, I took away, are:</p>

<blockquote><ul>
<li>Use of Boyer-Moore Algorithm</li>
<li>Use of Unbuffered Input using Raw System Call and avoid copying the input before searching it</li>
<li>Don&rsquo;t look for newlines until after a match has been found</li>
<li>You need to get down to the Kernel&rsquo;s level to make it really fast</li>
</ul>
</blockquote>

<p> And the greatest lesson:</p>

<blockquote><p>The key to making programs fast is to make them do practically nothing</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoSync Ruby Gem]]></title>
    <link href="https://sheharyar.me/blog/mongosync-ruby-gem/"/>
    <updated>2015-02-16T10:13:35-05:00</updated>
    <id>https://sheharyar.me/blog/mongosync-ruby-gem</id>
    <content type="html"><![CDATA[<p><a href="#">In my previous post</a>, I had written about my
<a href="https://github.com/sheharyarn/mongo-sync">mongo-sync</a> shell script that allows you to sync Local and Remote Mongo Databases.
I spent the last day converting it into a <a href="https://github.com/sheharyarn/mongo-sync-ruby">Ruby Gem</a>
so that you can perform actions using nice Rake Tasks and invoke the commands from Rails Console or <code>irb</code>.</p>

<!-- more -->


<p><a href="https://github.com/sheharyarn/mongo-sync-ruby"><img src="https://i.imgur.com/jvIUfJf.gif" alt="MongoSync Ruby Gem Demo GIF" /></a></p>

<p>If the gif above wasn&rsquo;t explanatory enough, start by adding it to your <code>Gemfile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;mongo_sync&#39;</span><span class="p">,</span>   <span class="ss">group</span><span class="p">:</span> <span class="ss">:development</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bundle and run the generator to create configuration template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle
</span><span class='line'><span class="nv">$ </span>rails g mongo_sync:config
</span></code></pre></td></tr></table></div></figure>


<p>Edit the newly created <code>config/mongo_sync.yml</code>, putting in details of your remote and local DBs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">local</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span> <span class="s">&#39;local_db_name&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">remote</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span> <span class="s">&#39;remote_db_name&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="s">&#39;some.remoteurl.com&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">27017</span>
</span><span class='line'>  <span class="l-Scalar-Plain">access</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;remote_mongo_user&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="s">&#39;remote_mongo_pass&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># For Heroku MongoDB URLs, here&#39;s the legend:</span>
</span><span class='line'><span class="c1"># mongodb://username:password@hosturl.com:port/db_name</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># All fields are required</span>
</span></code></pre></td></tr></table></div></figure>


<p>To Sync, use these rake tasks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake mongo_sync:push       <span class="c"># Push DB to Remote</span>
</span><span class='line'>rake mongo_sync:pull       <span class="c"># Pull DB to Local</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>You can use it in <code>rails console</code> as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo_sync&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">MongoSync</span><span class="o">.</span><span class="n">pull</span>
</span><span class='line'><span class="no">MongoSync</span><span class="o">.</span><span class="n">push</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># You can also pass path to a custom config file</span>
</span><span class='line'><span class="no">MongoSync</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;path/to/custom/mongo_sync.yml&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few important things to note are:</p>

<ul>
<li><a href="http://docs.mongodb.org/manual/tutorial/#getting-started"><code>mongodb</code></a> needs to be installed on your system (obviously)</li>
<li>Pushing/Pulling <strong><em>overwrites</em></strong> the Target DB</li>
<li>It&rsquo;s a good idea to keep your <code>mongo_sync.yml</code> in <code>.gitignore</code> or load the values from the <code>ENV</code></li>
</ul>


<p>There&rsquo;s still <a href="https://github.com/sheharyarn/mongo-sync-ruby#todo">much to do</a> but for now it should work perfectly with your Rails Projects.
<a href="http://twitter.com/sheharyarn">Find me on twitter</a> if you have something to add.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sync MongoDB Data Between Development and Production Databases]]></title>
    <link href="https://sheharyar.me/blog/sync-mongodb-local-and-production-heroku/"/>
    <updated>2015-02-14T20:50:44-05:00</updated>
    <id>https://sheharyar.me/blog/sync-mongodb-local-and-production-heroku</id>
    <content type="html"><![CDATA[<p>For a recent project of mine, I had to constantly copy my local MongoDB Database to and from my Production Heroku Database.
Running <code>mongodump</code> and <code>mongorestore</code> again and again with complicated flags to support remote urls quickly became a hassle.
I had previously used <a href="https://github.com/pedro/heroku-mongo-sync">heroku-mongo-sync</a>, but it is now deprecated in favor of
<a href="https://github.com/marcofognog/heroku-mongo-sync">marcofognog&rsquo;s fork</a>. Sadly, neither of them worked for me.</p>

<p>So I decided to write my own. Meet <a href="https://github.com/sheharyarn/mongo-sync"><strong>mongo-sync</strong></a>.</p>

<!-- more -->


<p><a href="https://github.com/sheharyarn/mongo-sync"><img src="https://i.imgur.com/hg6hwLk.gif" alt="mongo-sync demo gif" /></a></p>

<p>It&rsquo;s a simple shell script that allows you to sync your local and remote MongoDB databases, using two commands; <code>push</code> and <code>pull</code>.
Start by cloning the script on your machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/sheharyarn/mongo-sync.git
</span><span class='line'><span class="nb">cd </span>mongo-sync
</span></code></pre></td></tr></table></div></figure>


<p>Edit the provided <code>config.yml</code> with your db details:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">local</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span> <span class="s">&#39;local_db_name&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">remote</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span> <span class="s">&#39;remote_db_name&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="s">&#39;some.remoteurl.com&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">27017</span>
</span><span class='line'>  <span class="l-Scalar-Plain">access</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;remote_mongo_user&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="s">&#39;remote_mongo_pass&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># For Heroku MongoDB URLs, here&#39;s the legend:</span>
</span><span class='line'><span class="c1"># mongodb://username:password@hosturl.com:port/db_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, you can start syncing your databases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./mongo-sync push       <span class="c"># Push DB to Remote</span>
</span><span class='line'>./mongo-sync pull       <span class="c"># Pull DB to Local</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m planning to convert it into a Ruby Gem and a Heroku Plugin as well.</p>

<h1>Github: <a href="https://github.com/sheharyarn/mongo-sync">sheharyarn / mongo-sync</a></h1>

<br/>


<br/>


<h3>Notes</h3>

<ul>
<li>The <code>push</code> and <code>pull</code> commands overwrite the target DB</li>
<li>If you include this script into your project, it&rsquo;s a good idea to add <code>config.yml</code> to your <code>.gitignore</code></li>
</ul>


<br/>


<h3>Further Reading</h3>

<ul>
<li><a href="http://docs.mongodb.org/manual/reference/program/mongodump/#bin.mongodump">mongodump</a></li>
<li><a href="http://docs.mongodb.org/manual/reference/program/mongorestore/#bin.mongorestore">mongorestore</a></li>
<li><a href="http://www.theirishpenguin.com/2011/01/20/push-and-pull-data-between-your-local-mongodb-and-heroku-or-mongohq.html">Push and pull data between your local MongoDB and Heroku or MongoHQ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quickly Search for Files in Unix Terminal]]></title>
    <link href="https://sheharyar.me/blog/quickly-search-for-files-in-unix-terminal/"/>
    <updated>2015-01-29T19:38:42-05:00</updated>
    <id>https://sheharyar.me/blog/quickly-search-for-files-in-unix-terminal</id>
    <content type="html"><![CDATA[<p><code>find</code> is a powerful command-line utility but most of the time I just really need to search for matching files
and directories in the current directory. I also usually end up <code>grep</code>-ing the output and using wildcards around
the argument.</p>

<p>So why not just simplify the whole thing?</p>

<!-- more -->


<p>Creating a simple function that does that for us would be the way to go, so this should do the job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>search<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    find . -iname <span class="s2">&quot;*$1*&quot;</span> -d <span class="p">|</span> sed <span class="s1">&#39;s/^..//&#39;</span> <span class="p">|</span> grep -i --color <span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let me explain what this does. <code>find</code> does a case-insensitive <code>-iname</code> search in the current directory <code>.</code> of all the files
and folders matching the provided string <code>"*$1*"</code> and also looks in sub-directories <code>-d</code>. Then <code>sed</code> deletes the first
two characters of each line (they are <code>./</code>) to clean up the results. <code>grep -i</code> is then used to highlight the string in the results.</p>

<p>You can use it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>search vim
</span><span class='line'>Vim/.vimrc
</span><span class='line'>Vim/vundles.vim
</span><span class='line'>Vim
</span></code></pre></td></tr></table></div></figure>


<p>You can now add this function to your <code>.bash_profile</code> or better yet, your <a href="https://github.com/sheharyarn/dotfiles/blob/master/Zsh/functions.sh#L15-L27">.dotfiles</a> so it always gets loaded in to your shell session. I&rsquo;ve modified this function a bit more to accept multiple arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>search<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$# </span>-eq <span class="m">0</span> <span class="o">]]</span> <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;no arguments provided&quot;</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;usage: search string [string2 string3 ...]&quot;</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">for</span> i in <span class="s2">&quot;$@&quot;</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>            find . -iname <span class="s2">&quot;*$i*&quot;</span> -d <span class="p">|</span> sed <span class="s1">&#39;s/^..//&#39;</span> <span class="p">|</span> grep -i --color <span class="s2">&quot;$i&quot;</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="k">done</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now go! Be Free!</p>
]]></content>
  </entry>
  
</feed>
