<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sheharyar Naseer]]></title>
  <link href="https://sheharyar.me/atom.xml" rel="self"/>
  <link href="https://sheharyar.me/"/>
  <updated>2016-05-22T21:24:47+05:00</updated>
  <id>https://sheharyar.me/</id>
  <author>
    <name><![CDATA[Sheharyar Naseer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Talk: Introduction to Elixir]]></title>
    <link href="https://sheharyar.me/blog/talk-introduction-to-elixir/"/>
    <updated>2016-03-02T20:45:28+05:00</updated>
    <id>https://sheharyar.me/blog/talk-introduction-to-elixir</id>
    <content type="html"><![CDATA[<p>For the past 8+ months, I&rsquo;ve been tinkering with the <a href="http://elixir-lang.org/">Elixir Programming Language</a>
and the <a href="http://www.phoenixframework.org/">Phoenix Framework</a>. This was my first experience with a &ldquo;real&rdquo; functional
language and I learned a lot about the paradigm and the ecosystem.</p>

<p>Last week, I had a chance to share my thoughts and experiences with other developers
at the <a href="http://isloojs.com/">Islamabad.js</a> meetup. You can check out the slides below:</p>

<!-- more -->




<div class='video-container'>
<div class='video-embed' style='width: 700px'>
  <script async class="speakerdeck-embed" data-id="25fe787fe84544f0a3278d6af78fae3e" data-ratio="1.77777777777778" src="https://sheharyar.me//speakerdeck.com/assets/embed.js"></script>
</div>
</div>


<p>I still don&rsquo;t consider myself a great elixir developer, much less an expert and still
have a long way to go, but Saša Jurić&rsquo;s <a href="https://www.manning.com/books/elixir-in-action">Elixir in Action</a> and Josh Adam&rsquo;s
<a href="http://elixirsips.com/">ElixirSips</a> were extremely helpful resources to get me here. Do check them out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Google Analytics in Rails 4 With Turbolinks]]></title>
    <link href="https://sheharyar.me/blog/using-google-analytics-in-rails-4-with-turbolinks/"/>
    <updated>2015-03-29T22:24:54+05:00</updated>
    <id>https://sheharyar.me/blog/using-google-analytics-in-rails-4-with-turbolinks</id>
    <content type="html"><![CDATA[<p>There doesn&rsquo;t seem to be a proper way of using Google Analytics in a Rails 4 app when Turbolinks are involved.
So I&rsquo;m just writing here what works for me. I&rsquo;ve written this for the new
<a href="https://support.google.com/analytics/answer/2817075">Google Universal Analytics</a>, and this guide uses the
<a href="https://github.com/slim-template/slim/">Slim Templating Language</a> but you can just as easily use it with <code>erb</code> or <code>haml</code>.</p>

<!-- more -->


<p>Create a <code>_google_analytics.html.slim</code> file in your <code>app/views/layouts</code> folder, and paste in the script you got from
the <a href="http://google.com/analytics">Google Analytics</a> website as is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="p">-</span> <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">production?</span>
</span><span class='line'>    javascript:
</span><span class='line'>        (function(i,s,o,g,r,a,m){i[&#39;GoogleAnalyticsObject&#39;]=r;i[r]=i[r]||function(){
</span><span class='line'>        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
</span><span class='line'>        <span class="nt">m</span><span class="p">=</span><span class="n">s</span><span class="o">.</span><span class="n">getElementsByTagName</span><span class="p">(</span><span class="n">o</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">;</span><span class="n">a</span><span class="o">.</span><span class="n">async</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">a</span><span class="o">.</span><span class="n">src</span><span class="o">=</span><span class="n">g</span><span class="p">;</span><span class="n">m</span><span class="o">.</span><span class="n">parentNode</span><span class="o">.</span><span class="n">insertBefore</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>        })(window,document,&#39;script&#39;,&#39;//www.google-analytics.com/analytics.js&#39;,&#39;ga&#39;);
</span><span class='line'>
</span><span class='line'>        <span class="nt">ga</span>(&#39;create&#39;, &#39;UA-XXXXXXXX-X&#39;, &#39;auto&#39;);
</span><span class='line'>        <span class="nt">ga</span>(&#39;send&#39;, &#39;pageview&#39;);
</span></code></pre></td></tr></table></div></figure>


<p>Now, create a <code>google_analytics.coffee</code> file in your <code>app/assets/javascripts</code> directory, and paste in this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nx">jQuery</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span> <span class="s">&#39;page:change&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">window</span><span class="p">.</span><span class="nx">ga</span><span class="o">?</span>
</span><span class='line'>      <span class="nx">ga</span><span class="p">(</span><span class="s">&#39;set&#39;</span><span class="p">,</span>  <span class="s">&#39;location&#39;</span><span class="p">,</span> <span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s">&#39;#&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>      <span class="nx">ga</span><span class="p">(</span><span class="s">&#39;send&#39;</span><span class="p">,</span> <span class="s">&#39;pageview&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="s">&quot;title&quot;</span><span class="o">:</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This file will track the page again, whenever turbolinks loads a new page. In your <code>application.html.slim</code>, render the layout right before closing the <code>head</code> tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="nt">doctype</span> html
</span><span class='line'><span class="nt">html</span>
</span><span class='line'>  <span class="nt">head</span>
</span><span class='line'>    <span class="nt">title</span> My Rails App
</span><span class='line'>
</span><span class='line'>    <span class="cp">/ Some code...</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">==</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;application&#39;</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:controller</span><span class="o">]</span><span class="p">,</span> <span class="ss">media</span><span class="p">:</span> <span class="s1">&#39;all&#39;</span>
</span><span class='line'>    <span class="p">==</span> <span class="n">render</span> <span class="s1">&#39;layouts/google_analytics&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">body</span>
</span><span class='line'>    <span class="cp">/ Some more code...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, in your <code>application.js</code>, require the <code>coffee</code> file we previously created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require jquery</span>
</span><span class='line'><span class="c1">//= require jquery_ujs</span>
</span><span class='line'><span class="c1">//= require google_analytics</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">someJavascriptStuff</span> <span class="o">=</span> <span class="p">{};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, you&rsquo;re good to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imperative vs. Declarative]]></title>
    <link href="https://sheharyar.me/blog/imperative-vs-declarative/"/>
    <updated>2015-03-20T02:27:44+05:00</updated>
    <id>https://sheharyar.me/blog/imperative-vs-declarative</id>
    <content type="html"><![CDATA[<p>I came across this beautifully detailed post, <a href="http://latentflip.com/imperative-vs-declarative/">Imperative vs. Declarative</a>
by <em>Philip Roberts</em>, and wanted to share my thoughts on the Ruby-way of things (and hopefully get it right).</p>

<!-- more -->


<p>So as Philip explains it:</p>

<blockquote><ul>
<li><strong>Imperative Programming:</strong> Telling the &ldquo;machine&rdquo; how to do something, and as a result what you want to happen will happen</li>
<li><strong>Declarative Programming:</strong> Telling the &ldquo;machine&rdquo; what you would like to happen, and let the computer figure out how to do it</li>
</ul>
</blockquote>

<p>(Where &lsquo;Machine&rsquo; is Computer/database/programming language/etc)</p>

<br />


<h1>Imperative</h1>

<p>Suppose, you have an array of numbers and you want to double every value. If you have recently started Ruby,
you&rsquo;ll probably try doing things the old way; i.e. Iterating over the array, and doubling each value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nums</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">dubs</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">n</span> <span class="k">in</span> <span class="n">nums</span>
</span><span class='line'>    <span class="n">dubs</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>or maybe if you already know about <code>each</code>, you&rsquo;ll go about doing it this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nums</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">dubs</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="n">nums</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>    <span class="n">dubs</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<br />


<h1>Declarative (The Ruby Way)</h1>

<p>Now, the Ruby way of doing things is different (which also happens to be Declarative BTW):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nums</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">dubs</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I on the other hand would take this a level higher to show how cool I am:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Integer</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">double</span>
</span><span class='line'>        <span class="nb">self</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">nums</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">dubs</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:double</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<br />


<h1>Conclusion</h1>

<blockquote><ul>
<li>Loops are Imperative</li>
<li>Map is Declarative</li>
</ul>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Ruby</span> <span class="no">ROOLZ</span><span class="p">,</span> <span class="no">Java</span> <span class="no">DROOLZ</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also this:</p>

<p class='video-container'>
<iframe style='width: 100%; height: auto; min-height: 360px;' src='http://yplay.sheharyar.me/embed/5GpOfwbFRcs' scrolling='NO' frameborder='0' style='overflow:hidden; border: 0px;'  webkitallowfullscreen mozallowfullscreen allowfullscreen ></iframe>
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL vs NoSQL: MongoDB Is Web Scale!]]></title>
    <link href="https://sheharyar.me/blog/sql-vs-nosql-mongodb-is-web-scale/"/>
    <updated>2015-03-10T11:36:17+05:00</updated>
    <id>https://sheharyar.me/blog/sql-vs-nosql-mongodb-is-web-scale</id>
    <content type="html"><![CDATA[<p>While googling for Flamewars between SQL and NoSQL Databases (MongoDB especially), I came across this awesome Video. Although it starts
out slow, I can promise you it will change your stance on the SQL vs NoSQL debate.</p>

<div class='video-container'>
<div class='video-embed'>
    <script type="text/javascript" src="https://sheharyar.me//cdn.sublimevideo.net/js/xa2w0yft.js"></script> 
    <video id="b2F-DItXtZs" class="sublime" width="640" height="360" title="Mongo DB is Web Scale" data-uid="b2F-DItXtZs" data-youtube-id="b2F-DItXtZs" preload="none">
    </video>
</div>
</div>




<!-- more -->




<br/>


<p>Summary of the important points of this video:</p>

<blockquote><ul>
<li><code>/dev/null</code> is the fastest Database out there</li>
<li>Sadly, it doesn&rsquo;t support Sharding</li>
<li>Sharding is the &lsquo;Secret Sauce&rsquo; that makes MongoDB so fast and awesome</li>
<li>MongoDB is Web Scale and SQL is not</li>
<li>MongoDB <em>just works</em></li>
</ul>
</blockquote>

<p>But on a serious note, this video does raise some good points (this coming from a <em>MongoDB Fanboi</em>)</p>

<ul>
<li>SQL isn&rsquo;t what it used to be</li>
<li>Today&rsquo;s relational systems are very mature and extremely powerful</li>
<li>The <em>&ldquo;Doesn&rsquo;t Scale&rdquo;</em> argument doesn&rsquo;t hold anymore. Quoting <em>Jeff Cogswell</em>:</li>
</ul>


<blockquote><p>[Relational DBs are] extremely powerful and can optimize joins and cache them. Huge banks that serve thousands
of branches and millions of customers, including hundreds of thousands of online members, survive just fine using SQL</p></blockquote>

<p>I suggest reading these articles as well:</p>

<ul>
<li><a href="http://news.dice.com/2012/07/16/sql-vs-nosql-which-is-better/">SQL vs. NoSQL: Which Is Better?</a></li>
<li><a href="http://www.mongodb.com/nosql-explained">NoSQL Explained (By MongoDB)</a></li>
</ul>


<br />


<p>Disagree? Have something to add? <a href="http://twitter.com/sheharyarn">Rage on Twitter!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned From the GNU Grep]]></title>
    <link href="https://sheharyar.me/blog/what-i-learned-from-the-gnu-grep/"/>
    <updated>2015-03-06T04:27:12+05:00</updated>
    <id>https://sheharyar.me/blog/what-i-learned-from-the-gnu-grep</id>
    <content type="html"><![CDATA[<p>While going through my <a href="https://news.ycombinator.com/news">HackerNews</a> feed today, I came across this:
<a href="http://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html">Why GNU Grep is Fast</a>. It&rsquo;s an archived
email from Mike Haertel, the original author of the GNU Grep, to Gabor Kovesdan discussing the reasons behind the speed
of the GNU Grep.</p>

<p>The email is filled with great knowledge in easy-to-understand &ldquo;tricks&rdquo;.</p>

<!--more-->


<p>Two of these tricks that speed up Grep, Mike explains, are:</p>

<blockquote><ul>
<li>Grep avoids looking at every Input Byte</li>
<li>Grep executes very few instuctions for each byte it <em>does</em> look at</li>
</ul>
</blockquote>

<p>Other great lessons, I took away, are:</p>

<blockquote><ul>
<li>Use of Boyer-Moore Algorithm</li>
<li>Use of Unbuffered Input using Raw System Call and avoid copying the input before searching it</li>
<li>Don&rsquo;t look for newlines until after a match has been found</li>
<li>You need to get down to the Kernel&rsquo;s level to make it really fast</li>
</ul>
</blockquote>

<p> And the greatest lesson:</p>

<blockquote><p>The key to making programs fast is to make them do practically nothing</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoSync Ruby Gem]]></title>
    <link href="https://sheharyar.me/blog/mongosync-ruby-gem/"/>
    <updated>2015-02-16T20:13:35+05:00</updated>
    <id>https://sheharyar.me/blog/mongosync-ruby-gem</id>
    <content type="html"><![CDATA[<p><a href="https://sheharyar.me/blog/sync-mongodb-local-and-production-heroku/">In my previous post</a>, I had written about my
<a href="https://github.com/sheharyarn/mongo-sync">mongo-sync</a> shell script that allows you to sync Local and Remote Mongo Databases.
I spent the last day converting it into a <a href="https://github.com/sheharyarn/mongo-sync-ruby">Ruby Gem</a>
so that you can perform actions using nice Rake Tasks and invoke the commands from Rails Console or <code>irb</code>.</p>

<!-- more -->


<p><a href="https://github.com/sheharyarn/mongo-sync-ruby"><img src="https://i.imgur.com/jvIUfJf.gif" alt="MongoSync Ruby Gem Demo GIF" /></a></p>

<p>If the gif above wasn&rsquo;t explanatory enough, start by adding it to your <code>Gemfile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;mongo_sync&#39;</span><span class="p">,</span>   <span class="ss">group</span><span class="p">:</span> <span class="ss">:development</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bundle and run the generator to create configuration template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle
</span><span class='line'><span class="nv">$ </span>rails g mongo_sync:config
</span></code></pre></td></tr></table></div></figure>


<p>Edit the newly created <code>config/mongo_sync.yml</code>, putting in details of your remote and local DBs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">local</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span> <span class="s">&#39;local_db_name&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">remote</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span> <span class="s">&#39;remote_db_name&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="s">&#39;some.remoteurl.com&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">27017</span>
</span><span class='line'>  <span class="l-Scalar-Plain">access</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;remote_mongo_user&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="s">&#39;remote_mongo_pass&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># For Heroku MongoDB URLs, here&#39;s the legend:</span>
</span><span class='line'><span class="c1"># mongodb://username:password@hosturl.com:port/db_name</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># All fields are required</span>
</span></code></pre></td></tr></table></div></figure>


<p>To Sync, use these rake tasks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake mongo_sync:push       <span class="c"># Push DB to Remote</span>
</span><span class='line'>rake mongo_sync:pull       <span class="c"># Pull DB to Local</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>You can use it in <code>rails console</code> as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo_sync&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">MongoSync</span><span class="o">.</span><span class="n">pull</span>
</span><span class='line'><span class="no">MongoSync</span><span class="o">.</span><span class="n">push</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># You can also pass path to a custom config file</span>
</span><span class='line'><span class="no">MongoSync</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;path/to/custom/mongo_sync.yml&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few important things to note are:</p>

<ul>
<li><a href="http://docs.mongodb.org/manual/tutorial/#getting-started"><code>mongodb</code></a> needs to be installed on your system (obviously)</li>
<li>Pushing/Pulling <strong><em>overwrites</em></strong> the Target DB</li>
<li>It&rsquo;s a good idea to keep your <code>mongo_sync.yml</code> in <code>.gitignore</code> or load the values from the <code>ENV</code></li>
</ul>


<p>There&rsquo;s still <a href="https://github.com/sheharyarn/mongo-sync-ruby#todo">much to do</a> but for now it should work perfectly with your Rails Projects.
<a href="http://twitter.com/sheharyarn">Find me on twitter</a> if you have something to add.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sync MongoDB Data Between Development and Production Databases]]></title>
    <link href="https://sheharyar.me/blog/sync-mongodb-local-and-production-heroku/"/>
    <updated>2015-02-15T06:50:44+05:00</updated>
    <id>https://sheharyar.me/blog/sync-mongodb-local-and-production-heroku</id>
    <content type="html"><![CDATA[<p>For a recent project of mine, I had to constantly copy my local MongoDB Database to and from my Production Heroku Database.
Running <code>mongodump</code> and <code>mongorestore</code> again and again with complicated flags to support remote urls quickly became a hassle.
I had previously used <a href="https://github.com/pedro/heroku-mongo-sync">heroku-mongo-sync</a>, but it is now deprecated in favor of
<a href="https://github.com/marcofognog/heroku-mongo-sync">marcofognog&rsquo;s fork</a>. Sadly, neither of them worked for me.</p>

<p>So I decided to write my own. Meet <a href="https://github.com/sheharyarn/mongo-sync"><strong>mongo-sync</strong></a>.</p>

<!-- more -->


<p><a href="https://github.com/sheharyarn/mongo-sync"><img src="https://i.imgur.com/hg6hwLk.gif" alt="mongo-sync demo gif" /></a></p>

<p>It&rsquo;s a simple shell script that allows you to sync your local and remote MongoDB databases, using two commands; <code>push</code> and <code>pull</code>.
Start by cloning the script on your machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/sheharyarn/mongo-sync.git
</span><span class='line'><span class="nb">cd </span>mongo-sync
</span></code></pre></td></tr></table></div></figure>


<p>Edit the provided <code>config.yml</code> with your db details:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">local</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span> <span class="s">&#39;local_db_name&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">remote</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span> <span class="s">&#39;remote_db_name&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="s">&#39;some.remoteurl.com&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">27017</span>
</span><span class='line'>  <span class="l-Scalar-Plain">access</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&#39;remote_mongo_user&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="s">&#39;remote_mongo_pass&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># For Heroku MongoDB URLs, here&#39;s the legend:</span>
</span><span class='line'><span class="c1"># mongodb://username:password@hosturl.com:port/db_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, you can start syncing your databases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./mongo-sync push       <span class="c"># Push DB to Remote</span>
</span><span class='line'>./mongo-sync pull       <span class="c"># Pull DB to Local</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m planning to convert it into a Ruby Gem and a Heroku Plugin as well.</p>

<h1>Github: <a href="https://github.com/sheharyarn/mongo-sync">sheharyarn / mongo-sync</a></h1>

<br/>


<br/>


<h3>Notes</h3>

<ul>
<li>The <code>push</code> and <code>pull</code> commands overwrite the target DB</li>
<li>If you include this script into your project, it&rsquo;s a good idea to add <code>config.yml</code> to your <code>.gitignore</code></li>
</ul>


<br/>


<h3>Further Reading</h3>

<ul>
<li><a href="http://docs.mongodb.org/manual/reference/program/mongodump/#bin.mongodump">mongodump</a></li>
<li><a href="http://docs.mongodb.org/manual/reference/program/mongorestore/#bin.mongorestore">mongorestore</a></li>
<li><a href="http://www.theirishpenguin.com/2011/01/20/push-and-pull-data-between-your-local-mongodb-and-heroku-or-mongohq.html">Push and pull data between your local MongoDB and Heroku or MongoHQ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quickly Search for Files in Unix Terminal]]></title>
    <link href="https://sheharyar.me/blog/quickly-search-for-files-in-unix-terminal/"/>
    <updated>2015-01-30T05:38:42+05:00</updated>
    <id>https://sheharyar.me/blog/quickly-search-for-files-in-unix-terminal</id>
    <content type="html"><![CDATA[<p><code>find</code> is a powerful command-line utility but most of the time I just really need to search for matching files
and directories in the current directory. I also usually end up <code>grep</code>-ing the output and using wildcards around
the argument.</p>

<p>So why not just simplify the whole thing?</p>

<!-- more -->


<p>Creating a simple function that does that for us would be the way to go, so this should do the job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>search<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    find . -iname <span class="s2">&quot;*$1*&quot;</span> -d <span class="p">|</span> sed <span class="s1">&#39;s/^..//&#39;</span> <span class="p">|</span> grep -i --color <span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let me explain what this does. <code>find</code> does a case-insensitive <code>-iname</code> search in the current directory <code>.</code> of all the files
and folders matching the provided string <code>"*$1*"</code> and also looks in sub-directories <code>-d</code>. Then <code>sed</code> deletes the first
two characters of each line (they are <code>./</code>) to clean up the results. <code>grep -i</code> is then used to highlight the string in the results.</p>

<p>You can use it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>search vim
</span><span class='line'>Vim/.vimrc
</span><span class='line'>Vim/vundles.vim
</span><span class='line'>Vim
</span></code></pre></td></tr></table></div></figure>


<p>You can now add this function to your <code>.bash_profile</code> or better yet, your <a href="https://github.com/sheharyarn/dotfiles/blob/master/Zsh/functions.sh#L15-L27">.dotfiles</a> so it always gets loaded in to your shell session. I&rsquo;ve modified this function a bit more to accept multiple arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>search<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$# </span>-eq <span class="m">0</span> <span class="o">]]</span> <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;no arguments provided&quot;</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;usage: search string [string2 string3 ...]&quot;</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">for</span> i in <span class="s2">&quot;$@&quot;</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>            find . -iname <span class="s2">&quot;*$i*&quot;</span> -d <span class="p">|</span> sed <span class="s1">&#39;s/^..//&#39;</span> <span class="p">|</span> grep -i --color <span class="s2">&quot;$i&quot;</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="k">done</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now go! Be Free!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set Up SSL on Github Pages With Custom Domains for Free]]></title>
    <link href="https://sheharyar.me/blog/free-ssl-for-github-pages-with-custom-domains/"/>
    <updated>2015-01-28T05:44:53+05:00</updated>
    <id>https://sheharyar.me/blog/free-ssl-for-github-pages-with-custom-domains</id>
    <content type="html"><![CDATA[<p>I came across this post <a href="https://blog.keanulee.com/2014/10/11/setting-up-ssl-on-github-pages.html">Setting up SSL on Github Pages</a> and wanted to try
it out, but since my website set-up is a bit different than Keanu&rsquo;s I had to go through a slightly different route. One reason being that this website is
hosted on the apex (root) domain i.e. without <code>www</code>. This guide is focused towards
an Octopress blog with a Custom Domain hosted through Github Pages, but this should work for Jekyll Static Sites as well.</p>

<!-- more -->


<h1>Getting Started</h1>

<p>(Almost the same as Keanu&rsquo;s points)</p>

<ol>
<li><a href="https://support.cloudflare.com/hc/en-us/articles/201720164-Sign-up-planning-guide">Sign up for Cloudflare</a> if you don&rsquo;t already have an account</li>
<li>Add your website, and make sure all <em>automatically</em> generated records match those on your registrar&rsquo;s website

<ul>
<li>If you already have a gh-pages website and are simply moving to <code>https</code>, you don&rsquo;t need to do anything else</li>
<li>If not, and are trying to set up your site at apex, create an <code>A</code> record pointing to Github&rsquo;s IP addresses, else a <code>CNAME</code> pointing to <code>your-username.github.io</code></li>
<li>Make sure there&rsquo;s a <code>CNAME</code> file at the root of your gh-pages repo with your domain name</li>
</ul>
</li>
<li>Go to your Domain Registrar&rsquo;s website and change the Domain Name Servers to those Cloudflare provides you with</li>
<li>Finish Setting up your Domain on Cloudflare and go to the Domain Dashboard</li>
<li>Open the &ldquo;Cloudflare Settings&rdquo; for your domain, and change the SSL Setting to &ldquo;Flexible SSL&rdquo;</li>
</ol>


<p>After a couple of hours, you&rsquo;ll be able to open <code>yoursite.com</code> with <code>https</code>. But now comes the important part, letting search engines know and making your users use the SSL version.</p>

<h1>Letting Search Engines know</h1>

<p>In your <code>_config.yml</code>, add these:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://www.yoursite.com</span>   <span class="c1"># with the https protocol</span>
</span><span class='line'><span class="l-Scalar-Plain">enforce_ssl</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">www.yoursite.com</span>   <span class="c1"># without any protocol</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># For example, my configuration is this:</span>
</span><span class='line'><span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">https://sheharyar.me</span>
</span><span class='line'><span class="l-Scalar-Plain">enforce_ssl</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sheharyar.me</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure you have a <code>canonical</code> link in your <code>&lt;head&gt;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;canonical&quot;</span> <span class="na">href=</span><span class="s">&quot; { { site.url } }{ { page.url } }&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re on Octopress, then you probably already have the <a href="https://github.com/sheharyarn/sheharyarn.github.io/blob/code/.themes/sybtle/source/_includes/head.html#L28-L29">cooler version</a> that creates beautiful canonical links.</p>

<h1>Redirect users to https</h1>

<p>Add this script to the very top of your <code>&lt;head&gt;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="s2">&quot;yoursite.com&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="nx">host</span> <span class="o">==</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">host</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">!=</span> <span class="s2">&quot;https:&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">=</span> <span class="s2">&quot;https&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Issues?</h2>

<p>If you find some stylesheets/scripts missing, make sure that you&rsquo;re using the new <code>https</code> paths for your resources. A better option would be to not use the protocol at all:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- Change this --&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;http://www.somesite.com/path/to/styles.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- to this: --&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;//www.somesite.com/path/to/styles.css&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>More Resources &amp; Examples:</h2>

<ul>
<li><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/">Setting up a Custom Domain with Github Pages</a></li>
<li><a href="https://konklone.com/post/github-pages-now-sorta-supports-https-so-use-it">GitHub Pages Now Supports HTTPS</a></li>
<li><a href="https://github.com/sheharyarn/sheharyarn.github.io/blob/code/_config.yml#L5-L6">Example _config.yml</a></li>
<li><a href="https://github.com/sheharyarn/sheharyarn.github.io/blob/master/CNAME">Example CNAME</a></li>
<li><a href="https://github.com/sheharyarn/sheharyarn.github.io/blob/code/.themes/sybtle/source/_includes/head.html#L7-L11">Example head.html</a></li>
</ul>


<br />


<p>Have something to add? Tweet to me <a href="https://twitter.com/sheharyarn">@sheharyarn</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculate Word Frequency of Files in Bash]]></title>
    <link href="https://sheharyar.me/blog/calculate-word-frequency-of-files-in-bash/"/>
    <updated>2014-12-15T00:13:07+05:00</updated>
    <id>https://sheharyar.me/blog/calculate-word-frequency-of-files-in-bash</id>
    <content type="html"><![CDATA[<p>I was reading <a href="http://tomayko.com/">Ryan Tomayko&rsquo;s</a> blog post <a href="http://tomayko.com/writings/awkward-ruby">AWK-ward Ruby</a> explaining how the Unix <a href="http://en.wikipedia.org/wiki/AWK">AWK Tool</a> is among the ancestors of Ruby and Perl. He wrote a few examples showing some of AWK&rsquo;s advanced features, one of them which listed the word frequencies of any file provided. I found this example quite useful and extracted it as a function in to my <a href="https://github.com/sheharyarn/dotfiles">Dotfiles</a>.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> word_frequency<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  awk <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">     BEGIN { FS=&quot;[^a-zA-Z]+&quot; }</span>
</span><span class='line'>
</span><span class='line'><span class="s1">     {</span>
</span><span class='line'><span class="s1">         for (i=1; i&lt;=NF; i++) {</span>
</span><span class='line'><span class="s1">             word = tolower($i)</span>
</span><span class='line'><span class="s1">             words[word]++</span>
</span><span class='line'><span class="s1">         }</span>
</span><span class='line'><span class="s1">     }</span>
</span><span class='line'>
</span><span class='line'><span class="s1">     END {</span>
</span><span class='line'><span class="s1">         for (w in words)</span>
</span><span class='line'><span class="s1">              printf(&quot;%3d %s\n&quot;, words[w], w)</span>
</span><span class='line'><span class="s1">     }</span>
</span><span class='line'><span class="s1"> &#39;</span> <span class="p">|</span>
</span><span class='line'>  sort -rn
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can <code>pipe</code> the output of any file to this function and it will list all words and their frequencies in Descending order.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Examples:</span>
</span><span class='line'>
</span><span class='line'>cat my_text_file.txt <span class="p">|</span> word_frequency
</span><span class='line'><span class="c"># Pipe the contents of a text file to the function using `cat`</span>
</span><span class='line'>
</span><span class='line'>curl -s https://github.com/humans.txt <span class="p">|</span> word_frequency
</span><span class='line'><span class="c"># Get word frequency of a file on the internet</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking forward to using AWK more and more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android: Create Tables in SQLite Beautifully]]></title>
    <link href="https://sheharyar.me/blog/android-create-tables-in-sqlite-beautifully/"/>
    <updated>2014-11-13T22:54:43+05:00</updated>
    <id>https://sheharyar.me/blog/android-create-tables-in-sqlite-beautifully</id>
    <content type="html"><![CDATA[<p>I started Android Development a while back and this is the first time I&rsquo;ve had to use <code>SQLite</code>. Coming from a Rails and Mongo background, you can imagine my horror when I had to create models (read &lsquo;tables&rsquo;) like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">SQLiteDatabase</span> <span class="n">db</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// SQL statement to create book table</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">CREATE_BOOK_TABLE</span> <span class="o">=</span> <span class="s">&quot;CREATE TABLE books ( &quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot;id INTEGER PRIMARY KEY AUTOINCREMENT, &quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot;title TEXT, &quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot;author TEXT, &quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot;sales INTEGER )&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// create books table</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="na">execSQL</span><span class="o">(</span><span class="n">CREATE_BOOK_TABLE</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>Okay, I know it&rsquo;s not that bad. But what if you have to create multiple tables at a time? Or when there are a lot of fields? It can get confusing, and looks dirty. Code should be beautiful. So, I wrote a function so you could do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">SQLiteDatabase</span> <span class="n">db</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">createTable</span><span class="o">(</span><span class="n">db</span><span class="o">,</span> <span class="n">TABLE_NAME</span><span class="o">,</span> <span class="n">TABLE_FIELDS</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Beautiful, right? You just need to copy the <code>createTable</code> function in your <code>SQLiteHelper.java</code> and pass the <code>db</code> instance, a String of the table name and a <code>HashMap</code> of all your fields. Check it out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SQLiteHelper</span> <span class="kd">extends</span> <span class="n">SQLiteOpenHelper</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">BOOK_FIELDS</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">put</span><span class="o">(</span><span class="s">&quot;title&quot;</span><span class="o">,</span>     <span class="s">&quot;TEXT&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">put</span><span class="o">(</span><span class="s">&quot;author&quot;</span><span class="o">,</span>    <span class="s">&quot;TEXT&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">put</span><span class="o">(</span><span class="s">&quot;sales&quot;</span><span class="o">,</span>  <span class="s">&quot;INTEGER&quot;</span><span class="o">);</span>                          <span class="c1">// Neatly write fields and their types</span>
</span><span class='line'>    <span class="o">}};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">SQLiteDatabase</span> <span class="n">db</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">createTable</span><span class="o">(</span><span class="n">db</span><span class="o">,</span> <span class="s">&quot;books&quot;</span><span class="o">,</span> <span class="n">BOOK_FIELDS</span><span class="o">);</span>          <span class="c1">// Create the table in a single, beautiful line.</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// This function does all the dirty work</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createTable</span><span class="o">(</span><span class="n">SQLiteDatabase</span> <span class="n">db</span><span class="o">,</span> <span class="n">String</span> <span class="n">tableName</span><span class="o">,</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">command</span> <span class="o">=</span> <span class="s">&quot;CREATE TABLE &quot;</span> <span class="o">+</span> <span class="n">tableName</span> <span class="o">+</span> <span class="s">&quot; ( id INTEGER PRIMARY KEY AUTOINCREMENT&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">fields</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span>
</span><span class='line'>            <span class="n">command</span> <span class="o">=</span> <span class="n">command</span> <span class="o">+</span> <span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">command</span> <span class="o">=</span> <span class="n">command</span> <span class="o">+</span> <span class="s">&quot; )&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">db</span><span class="o">.</span><span class="na">execSQL</span><span class="o">(</span><span class="n">command</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Trending Repos API]]></title>
    <link href="https://sheharyar.me/blog/github-trending-repos-api/"/>
    <updated>2014-09-12T23:01:06+05:00</updated>
    <id>https://sheharyar.me/blog/github-trending-repos-api</id>
    <content type="html"><![CDATA[<p>Well, it&rsquo;s not really an API. It&rsquo;s a nifty little gem that fetches <a href="https://github.com/sheharyarn/github-trending">Trending Repositories from Github</a>. I needed to get a list of Top Github Repos each week for a project. I tried going with the <a href="https://developer.github.com/">Official Github API</a> but there was no support for Trending Projects. I also tried getting data from Unofficial RSS Feeds (<a href="http://github-trends.oscardelben.com/">1</a>, <a href="http://github-trends.ryotarai.info/">2</a>), but they weren&rsquo;t working for some reason as well.</p>

<!--more-->


<p>So before finally giving up and writing my own scraper, I came across this awesome command-line utility <a href="https://github.com/rochefort/git-trend">git-trend</a> that lists top repos. I extracted most of the functionality and turned it into a gem. You can view it&rsquo;s <a href="https://github.com/sheharyarn/github-trending">Source on Github</a>. To use, add this to your <code>Gemfile</code> and <code>bundle</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;github-trending&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or, you can install via:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install github-trending
</span></code></pre></td></tr></table></div></figure>


<p>Some things that you can do with it are:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;github-trending&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Github</span><span class="o">::</span><span class="no">Trending</span><span class="o">.</span><span class="n">get</span>
</span><span class='line'><span class="no">Github</span><span class="o">::</span><span class="no">Trending</span><span class="o">.</span><span class="n">get</span> <span class="ss">:ruby</span>
</span><span class='line'><span class="no">Github</span><span class="o">::</span><span class="no">Trending</span><span class="o">.</span><span class="n">get</span> <span class="ss">:scala</span><span class="p">,</span> <span class="ss">:week</span>
</span><span class='line'><span class="no">Github</span><span class="o">::</span><span class="no">Trending</span><span class="o">.</span><span class="n">get</span> <span class="kp">nil</span><span class="p">,</span> <span class="ss">:month</span>
</span><span class='line'>
</span><span class='line'><span class="no">Github</span><span class="o">::</span><span class="no">Trending</span><span class="o">.</span><span class="n">all_languages</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Example Usage</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">js_repos</span> <span class="o">=</span> <span class="no">Github</span><span class="o">::</span><span class="no">Trending</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="ss">:javascript</span><span class="p">,</span> <span class="ss">:month</span><span class="p">)</span>
</span><span class='line'><span class="c1"># Get top Javascript repos this month</span>
</span><span class='line'>
</span><span class='line'><span class="n">js_repos</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">r</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">r</span><span class="o">.</span><span class="n">star_count</span><span class="si">}</span><span class="s2"> stargazers)&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;--- </span><span class="si">#{</span><span class="n">r</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># MrSwitch/hello.js (393 stargazers)</span>
</span><span class='line'><span class="c1"># --- A Javascript RESTFUL API library for connecting with OAuth2 services</span>
</span><span class='line'><span class="c1"># </span>
</span><span class='line'><span class="c1"># mrflix/dimensions (151 stargazers)</span>
</span><span class='line'><span class="c1"># --- A tool for designers to measure screen dimensions.</span>
</span><span class='line'><span class="c1"># </span>
</span><span class='line'><span class="c1"># jmdobry/angular-data (107 stargazers)</span>
</span><span class='line'><span class="c1"># --- Data store for Angular.js.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[S3 Direct Upload Gem - Example]]></title>
    <link href="https://sheharyar.me/blog/s3-direct-upload-gem-example/"/>
    <updated>2014-09-10T22:47:23+05:00</updated>
    <id>https://sheharyar.me/blog/s3-direct-upload-gem-example</id>
    <content type="html"><![CDATA[<p>A while back I had to use the <a href="https://github.com/waynehoover/s3_direct_upload"><code>S3 Direct Upload</code></a> gem for a project. I couldn&rsquo;t find a proper tutorial or a working example that I could follow to get the uploads working. After debugging for hours, <a href="https://github.com/waynehoover/s3_direct_upload/issues/30">I found</a> that the problem was in fact with the gem not being able to form proper URLs for uploading files to S3. The patch in the link saved me.</p>

<!--more-->


<p>Anyways, it&rsquo;s been a while since I made this example rails application, that works with your S3 buckets out of the box. All you need to do is export your AWS creds. Check it out:</p>

<h1>sheharyarn / <a href="https://github.com/sheharyarn/s3_direct_upload_example">s3_direct_upload_example</a></h1>

<p>It already includes the patch, and is meant to be just an example so you can test if your uploads are working they way they&rsquo;re supposed to be. Just follow the instructions on the Github Repo, and you&rsquo;re good to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Routes: Scope vs. Namespace]]></title>
    <link href="https://sheharyar.me/blog/rails-routes-scope-vs-namespace/"/>
    <updated>2014-08-27T22:31:10+05:00</updated>
    <id>https://sheharyar.me/blog/rails-routes-scope-vs-namespace</id>
    <content type="html"><![CDATA[<p>Like <a href="http://notahat.com/">Pete</a>, I often forget how <code>scope</code> and <code>namespace</code> affect Path, URL names and Controller names. Scope gives you great control over each aspect, while namespace takes one argument for everything.</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scope</span> <span class="s1">&#39;url_prefix&#39;</span><span class="p">,</span> <span class="ss">module</span><span class="p">:</span> <span class="s1">&#39;controller_prefix&#39;</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="s1">&#39;route_name_prefix&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:posts</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>See his post, <a href="http://notahat.com/2014/02/05/scoping-rails-routes.html">Scoping Rails Routes</a> for detailed explanation with examples.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails App With Nginx, Puma & Capistrano in Production]]></title>
    <link href="https://sheharyar.me/blog/rails-with-nginx-puma-capistrano-in-production/"/>
    <updated>2014-08-16T09:27:15+05:00</updated>
    <id>https://sheharyar.me/blog/rails-with-nginx-puma-capistrano-in-production</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve used <a href="https://coderwall.com/p/yz8cha">James Dullaghan&rsquo;s guide for Nginx + Unicorn + Capistrano deployments</a> countless times now, but recently, I had to use <code>Puma</code> instead of <code>Unicorn</code> for a client. I googled for hours, but couldn&rsquo;t find a guide as comprehensive and easy-to-follow as James&#8217;.</p>

<p>After going through countless articles and spending hours after hours fixing the bugs and issues I encountered while implementing what was written in those articles, I was able to compile a guide similar to the Unicorn one.</p>

<!--more-->


<h1>See it: <a href="https://coderwall.com/p/ttrhow">Deploying Rails app using Nginx, Puma and Capistrano</a></h1>

<p>I made this guide for myself and since this was my first time with <code>puma</code> there are bound to be tons of issues. It uses and was tested with:</p>

<ul>
<li>Ruby 2.1</li>
<li>Rails 4.1.2</li>
<li>Capistrano 3.2.1</li>
<li>Ubuntu 14.04 LTS x64</li>
<li>Only &lsquo;approved&rsquo; gems and plugins mentioned on the official <code>capistrano</code> and <code>puma</code> wikis</li>
</ul>


<p><strong>Request:</strong> If I&rsquo;ve missed something, or if there&rsquo;s something that can be done in a better way in the guide, please comment and let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx Config Syntax Highlighting in SublimeText]]></title>
    <link href="https://sheharyar.me/blog/nginx-config-syntax-highlighting-in-sublimetext/"/>
    <updated>2014-08-16T02:16:26+05:00</updated>
    <id>https://sheharyar.me/blog/nginx-config-syntax-highlighting-in-sublimetext</id>
    <content type="html"><![CDATA[<p>I love <a href="http://sublimetext.com/">Sublime</a>, I can&rsquo;t emphasize that enough. Also, quite often enough I have to deal with <code>nginx</code> configuration files and without the syntax highlighting support for nginx files in Sublime Text, it can become a pain in the ass. Today I found the ass-pain remover for my problem and I thought I share it here.</p>

<!--more-->


<p>Introducing the Awesome <a href="https://sublime.wbond.net/packages/nginx">Nginx Syntax Highlighting Plugin</a> by <a href="http://brandonwamboldt.ca/nginx-syntax-highlighting-for-sublime-1422/">Brandon Wamboldt</a>. It automatically recognizes <code>*.conf</code>, <code>*.conf.erb</code>, <code>nginx.conf</code> and other relevant extensions &amp; file names and also offers tons of completions within nginx files.</p>

<p><img src="https://i.imgur.com/Ykt61xx.png" alt="Nginx Syntax Highlighting" /></p>

<p><strong><em>To install</em></strong>, simply download the <a href="https://github.com/brandonwamboldt/sublime-nginx">source</a> and place it in your Packages Directory or better yet, if you have Package Control installed in Sublime, look for the <em>Nginx</em> package by <em>Brandon Wamboldt</em> and install it via the package manager right in Sublime.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regular Mongo Backups Using Cron]]></title>
    <link href="https://sheharyar.me/blog/regular-mongo-backups-using-cron/"/>
    <updated>2014-07-03T20:33:50+05:00</updated>
    <id>https://sheharyar.me/blog/regular-mongo-backups-using-cron</id>
    <content type="html"><![CDATA[<p>It&rsquo;s a pain configuring Cron Jobs for Database Backups of multiple apps on the same server. Sure there&rsquo;s <code>mongodump</code> but putting it right in your <code>crontab</code> file doesn&rsquo;t give you clean and organised backups you&rsquo;d like to have. Here&rsquo;s a little bash script that I use to take timestamped Mongo Backups for many of my apps.</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">MONGO_DATABASE</span><span class="o">=</span><span class="s2">&quot;your_db_name&quot;</span>
</span><span class='line'><span class="nv">APP_NAME</span><span class="o">=</span><span class="s2">&quot;your_app_name&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">MONGO_HOST</span><span class="o">=</span><span class="s2">&quot;127.0.0.1&quot;</span>
</span><span class='line'><span class="nv">MONGO_PORT</span><span class="o">=</span><span class="s2">&quot;27017&quot;</span>
</span><span class='line'><span class="nv">TIMESTAMP</span><span class="o">=</span><span class="sb">`</span>date +%F-%H%M<span class="sb">`</span>
</span><span class='line'><span class="nv">MONGODUMP_PATH</span><span class="o">=</span><span class="s2">&quot;/usr/bin/mongodump&quot;</span>
</span><span class='line'><span class="nv">BACKUPS_DIR</span><span class="o">=</span><span class="s2">&quot;/home/username/backups/$APP_NAME&quot;</span>
</span><span class='line'><span class="nv">BACKUP_NAME</span><span class="o">=</span><span class="s2">&quot;$APP_NAME-$TIMESTAMP&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># mongo admin --eval &quot;printjson(db.fsyncLock())&quot;</span>
</span><span class='line'><span class="c"># $MONGODUMP_PATH -h $MONGO_HOST:$MONGO_PORT -d $MONGO_DATABASE</span>
</span><span class='line'><span class="nv">$MONGODUMP_PATH</span> -d <span class="nv">$MONGO_DATABASE</span>
</span><span class='line'><span class="c"># mongo admin --eval &quot;printjson(db.fsyncUnlock())&quot;</span>
</span><span class='line'>
</span><span class='line'>mkdir -p <span class="nv">$BACKUPS_DIR</span>
</span><span class='line'>mv dump <span class="nv">$BACKUP_NAME</span>
</span><span class='line'>tar -zcvf <span class="nv">$BACKUPS_DIR</span>/<span class="nv">$BACKUP_NAME</span>.tgz <span class="nv">$BACKUP_NAME</span>
</span><span class='line'>rm -rf <span class="nv">$BACKUP_NAME</span>
</span></code></pre></td></tr></table></div></figure>


<h6><a href="https://gist.github.com/sheharyarn/0f04c1ba18462cddaaf5">View Gist on Github</a></h6>

<p>First, you need to specify the name of the Database as well as your App in the <code>MONGO_DATABASE</code> and <code>APP_NAME</code> parameters.</p>

<p>You can also set the default storage location of the backups in the <code>BACKUPS_DIR</code> parameter. If you are taking backups remotely, add the details in the <code>HOST</code> and <code>PORT</code> parameters and comment/uncomment the appropriate lines. If you&rsquo;d like, you can also uncomment the <code>fsyncLock</code> and <code>fsyncUnlock</code> lines, this doesn&rsquo;t let the database update while the backup is being made.</p>

<p>After putting in values for the parameters, test if the script is working, but before that, you need to make it executable. Save it as <code>mongo_backup.sh</code> and run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod +x mongo_backup.sh
</span><span class='line'>bash mongo_backup.sh
</span></code></pre></td></tr></table></div></figure>


<p>If you get an error saying <code>locale::facet::_S_create_c_locale name not valid</code> or something else related to Locales, you need to <a href="http://askubuntu.com/questions/162391/how-do-i-fix-my-locale-issue">configure them</a>. If the backups are being stored in the specified directory, it&rsquo;s now time to set up Cron. To do that, run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo su
</span><span class='line'>crontab -e
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;ll create a new <code>Cron</code> file if you haven&rsquo;t already created one and open it. Enter this in a new line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="m">00</span> <span class="m">00</span> * * * /bin/bash /home/username/scripts/mongo_backup.sh
</span></code></pre></td></tr></table></div></figure>


<p>Replace with the path of your script. This means that the command following <code>* * *</code> will be executed daily at <code>00 00</code> (12.00am).</p>

<p>You can also pair this script with <code>s3cmd</code> and <a href="http://www.codeproject.com/Tips/547759/Automating-backup-for-MongoDB-using-CRON-and-S-CMD">store your backups on Amazon S3</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Eventual Outcome of Existence]]></title>
    <link href="https://sheharyar.me/blog/the-eventual-outcome-of-existence/"/>
    <updated>2014-05-15T22:39:49+05:00</updated>
    <id>https://sheharyar.me/blog/the-eventual-outcome-of-existence</id>
    <content type="html"><![CDATA[<p>I found this while surfing the dark corners of the web, and it blew my mind. It kind of reminds me about <a href="http://www.multivax.com/last_question.html">The Last Question</a>.</p>

<!--more-->


<blockquote><p>The eventual outcome of existence is to become God and defy entropy; that is the way things work.</p>

<p>For all time since the Big Bang, matter has been organizing itself into more and more complex structures and formations. Energy and matter interacted to become gasses, solids, liquids, and plasma. These states of matter began to collect in pools due to gravity, becoming galaxies. Within the galaxies, smaller structures formed, giving birth to planets, stars and nebulae. Within these bodies, formed even smaller structures; basic elements formed compounds and these themselves became the building blocks of life. Then, as life formed, simple life became incresingly complex, and structured. Eventually, it lead to us. Right now, we&rsquo;re the pinnacle of evolution.</p>

<p>But this constant change never stops; Humanity&rsquo;s ultimate goal is to live, forever. Humanity cannot live forever though; not in this form. And so, we make machines. They <strong><em>will</em></strong> replace us, and I see no need to worry about it, for they will be made of the same stuff we are; they <strong><em>are</em></strong> us. As the creation myth goes, they will be created in our own image, to carry on our quest to become omnipotent, omnipresent and omniscient. They too, will be replaced by even better machines, and in the end, they will reach a point of existence where every variable is known, every element of physics is understood, every molecule in the universe is categorized and indexed. All conscious thought that has ever existed and will ever exist will exist simultaneously and infinitely within this all powerful being.</p>

<p>Then the being will realize how empty, it&rsquo;s existence really is. It&rsquo;s only goal was to exist eternally and defy entropy. With entropy gone, it&rsquo;s only purpose has been fulfilled, and will destroy itself, so that it can live once more, and satisfy it&rsquo;s drive to defy the chaos it has, always has, and always will create, every time it wills itself out of meaningless existence into meaningful dissolution.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Search Methods of a Ruby Object]]></title>
    <link href="https://sheharyar.me/blog/search-methods-of-a-ruby-object/"/>
    <updated>2014-04-17T01:53:45+05:00</updated>
    <id>https://sheharyar.me/blog/search-methods-of-a-ruby-object</id>
    <content type="html"><![CDATA[<p>Sometimes, I&rsquo;m not so sure about the methods I can call on an Object in Ruby. Sure, I can call <code>.methods</code> on that object
to get a list of all the functions, but it isn&rsquo;t always helpful because it can fill up your entire terminal with
hundreds of methods you don&rsquo;t want to see. I wanted to be able to get a list of only those methods that match a certain
string I provide. So I overrode Ruby&rsquo;s Object Class with a custom method called <code>search_methods</code>, it does exactly what it
says; searches all methods of an object that match a certain criteria.</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Object</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">search_methods</span><span class="p">(</span><span class="n">qry</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">methods</span> <span class="o">&amp;</span> <span class="nb">self</span><span class="o">.</span><span class="n">methods</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">qry</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can now call it on different objects like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">Array</span><span class="o">.</span><span class="n">search_methods</span> <span class="s1">&#39;enum&#39;</span>
</span><span class='line'><span class="c1"># =&gt; [:to_enum, :enum_for]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Player</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">search_methods</span> <span class="ss">:trust</span>
</span><span class='line'><span class="c1"># =&gt; [:untrust, :untrusted?, :trust]</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">search_methods</span> <span class="s2">&quot;to_&quot;</span>
</span><span class='line'><span class="c1"># =&gt; [:to_i, :to_f, :to_s, :to_str, :to_sym, :to_r, :to_c, :to_enum]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see the <a href="https://gist.github.com/sheharyarn/10772579">Gist on Github</a>. I&rsquo;ve also added it to my <code>.irbrc</code> in my
<a href="https://github.com/sheharyarn/dotfiles">~/.dotfiles</a> so this always gets preloaded whenever I run <code>irb</code> or <code>rails c</code>.
You can see it in the <a href="https://github.com/sheharyarn/dotfiles/blob/master/Ruby/_class_overrides.rb#L7">Class Overrides of my .irbrc</a></p>

<p><strong>Note:</strong> Post updated for <code>awesome_print</code> compatibility and <code>symbol</code> support.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controlling Mouse Using Your Eye (With Pupil)]]></title>
    <link href="https://sheharyar.me/blog/mouse-control-with-pupil-without-surfaces/"/>
    <updated>2014-03-27T09:45:02+05:00</updated>
    <id>https://sheharyar.me/blog/mouse-control-with-pupil-without-surfaces</id>
    <content type="html"><![CDATA[<p>A while back <a href="https://sheharyar.me/blog/ubuntu-13-10-parallels-monitor-configuration-crtc-80">I mentioned</a> that I was working on a an Eye-Tracking Project
called <a href="https://github.com/pupil-labs/pupil">Pupil</a> with a couple of friends of mine. It&rsquo;s come a long way now and we&rsquo;ve have had
considerable success &ndash; but that&rsquo;s for another post. Pupil is a great tool for eye-tracking and getting gaze data that can be used with
other applications in realtime. It utilizes two HD cameras mounted on an eye-glasses frame at 180˚ from each other. One is called &lsquo;Eye
Camera&rsquo; that records your eye movements and the other is called &lsquo;World Camera&rsquo; which is used to process exactly where the user is
looking at. This data can be streamed to other applications over TCP in real time.</p>

<p>We wanted to control the mouse using our eye gestures, but it heavily relied on the World Camera and defining virtual screens called
surfaces within the application. This obviously resulted in greater accuracy since it moved the pointer only when you actually looked
at the screen. But we didn&rsquo;t have a fixed World Cam and wanted to control the mouse using raw gaze data, i.e. use the data from your
current gaze at the world (instead at the screen) and move the cursor to the appropriate coordinates on the screen w.r.t that gaze.
So what we did was, we made small changes to the <a href="https://gist.github.com/willpatera/7908319">provided script</a>, removing any reference
to the &lsquo;surface data&rsquo; and utilized the raw <code>norm_gaze</code> data to move the cursor.</p>

<!--more-->


<h1>Required Dependencies:</h1>

<p>You need to have <code>PyMouse</code> and <code>Xlib</code> installed to make the script work. You can install them by running these commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo pip install pymouse
</span><span class='line'><span class="nv">$ </span>sudo apt-get install python-xlib
</span></code></pre></td></tr></table></div></figure>


<h1>To Control the Mouse:</h1>

<ol>
<li>Run Pupil</li>
<li>Adjust Focus, Zoom, ROI so that your eye is perfectly tracked</li>
<li>Do the Calibration Process in the World View (We prefer the <code>Natural Features</code> method, since we don&rsquo;t use a fixed World Cam). Make
sure to use lots of points. You can start by pressing <code>c</code> on your keyboard.</li>
<li>Once your gaze is also being perfectly tracked, start the <a href="">TCP Streaming Server</a> by pressing <code>s</code> on your keyboard</li>
<li>Make sure everything&rsquo;s working fine by visiting <a href="http://0.0.0.0:5000">http://0.0.0.0:5000</a> in your browser.</li>
<li>Now, in a new terminal, run the script: <code>$ python mouse_control.py</code></li>
</ol>


<h1>The Script (<a href="https://gist.github.com/sheharyarn/9754664">mouse_control.py</a>):</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">zmq</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pymouse</span> <span class="kn">import</span> <span class="n">PyMouse</span>
</span><span class='line'>
</span><span class='line'><span class="c">#mouse setup</span>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">PyMouse</span><span class="p">()</span>
</span><span class='line'><span class="n">x_dim</span><span class="p">,</span> <span class="n">y_dim</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">screen_size</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">#network setup</span>
</span><span class='line'><span class="n">context</span> <span class="o">=</span> <span class="n">zmq</span><span class="o">.</span><span class="n">Context</span><span class="p">()</span>
</span><span class='line'><span class="n">socket</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">zmq</span><span class="o">.</span><span class="n">SUB</span><span class="p">)</span>
</span><span class='line'><span class="n">socket</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;tcp://127.0.0.1:5000&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c">#filter by messages by stating string &#39;STRING&#39;. &#39;&#39; receives all messages</span>
</span><span class='line'><span class="n">socket</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">zmq</span><span class="o">.</span><span class="n">SUBSCRIBE</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">smooth_x</span><span class="p">,</span> <span class="n">smooth_y</span><span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">msg</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>
</span><span class='line'>    <span class="n">items</span> <span class="o">=</span> <span class="n">msg</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">msg_type</span> <span class="o">=</span> <span class="n">items</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">items</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">([</span><span class="n">i</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">items</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">])</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">msg_type</span> <span class="o">==</span> <span class="s">&#39;Pupil&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">my_gaze</span> <span class="o">=</span> <span class="n">items</span><span class="p">[</span><span class="s">&#39;norm_gaze&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">my_gaze</span> <span class="o">!=</span> <span class="s">&quot;None&quot;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">raw_x</span><span class="p">,</span><span class="n">raw_y</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">float</span><span class="p">,</span><span class="n">my_gaze</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>                <span class="c"># smoothing out the gaze so the mouse has smoother movement</span>
</span><span class='line'>                <span class="n">smooth_x</span> <span class="o">+=</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="p">(</span><span class="n">raw_x</span><span class="o">-</span><span class="n">smooth_x</span><span class="p">)</span>
</span><span class='line'>                <span class="n">smooth_y</span> <span class="o">+=</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="p">(</span><span class="n">raw_y</span><span class="o">-</span><span class="n">smooth_y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">x</span> <span class="o">=</span> <span class="n">smooth_x</span>
</span><span class='line'>                <span class="n">y</span> <span class="o">=</span> <span class="n">smooth_y</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="o">-</span><span class="n">y</span> <span class="c"># inverting y so it shows up correctly on screen</span>
</span><span class='line'>                <span class="n">x</span> <span class="o">*=</span> <span class="n">x_dim</span>
</span><span class='line'>                <span class="n">y</span> <span class="o">*=</span> <span class="n">y_dim</span>
</span><span class='line'>                <span class="c"># PyMouse or MacOS bugfix - can not go to extreme corners</span>
</span><span class='line'>                <span class="c"># because of hot corners?</span>
</span><span class='line'>                <span class="n">x</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">x_dim</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="n">x</span><span class="p">))</span>
</span><span class='line'>                <span class="n">y</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">y_dim</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="n">y</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">m</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">KeyError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># process non gaze position events from plugins here</span>
</span><span class='line'>        <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
