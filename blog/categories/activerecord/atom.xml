<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Activerecord, | Sheharyar Naseer]]></title>
  <link href="https://sheharyar.me/blog/categories/activerecord/atom.xml" rel="self"/>
  <link href="https://sheharyar.me/"/>
  <updated>2018-02-14T01:25:42-05:00</updated>
  <id>https://sheharyar.me/</id>
  <author>
    <name><![CDATA[Sheharyar Naseer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Polymorphic Paperclip Attachments With Partial ActiveRecord Index]]></title>
    <link href="https://sheharyar.me/blog/polymorphic-paperclip-attachments-partial-index/"/>
    <updated>2016-12-15T06:44:06-05:00</updated>
    <id>https://sheharyar.me/blog/polymorphic-paperclip-attachments-partial-index</id>
    <content type="html"><![CDATA[<p>A common pattern in Rails applications with Image Attachments is to create a
separate model for the Image and use it in Polymorphic relationships with
other models. Since more often than not an object has more than one image
attached with a default one, the classic way of storing a <code>default_image_id</code>
on the parent model can quickly result in code duplication and spaghetti
through out the rails application.</p>

<p>A better solution is to specify a <code>default</code> boolean on the Image model itself
and use partial indexes for proper scoping.</p>

<!-- more -->


<p>To DRY up the code even further, we can use the Concern Model pattern.
<a href="https://www.viget.com/articles/slimming-down-your-models-and-controllers">This Blog Post</a> on Viget is an excellent primer on using Concerns. I&rsquo;m
using Rails 5, Postgres &amp; Paperclip and will use the class
name <code>ImageAttachment</code> through out the article.</p>

<p>Start by creating a migration for your Image model:</p>

<p>```ruby</p>

<h1>db/migrations/xxxxxxxxxxxxxx_create_image_attachment.rb</h1>

<p>class CreateImageAttachments &lt; ActiveRecord::Migration[5.0]
  def change</p>

<pre><code>create_table :image_attachments do |t|
  t.belongs_to :imageable, polymorphic: true
  t.attachment :data
  t.boolean    :default, default: false

  t.timestamps
end

add_index :image_attachments, [:imageable_id, :imageable_type, :default],
  unique: true,
  where:  '"default" = TRUE',
  name:   :unique_on_imageable_default
</code></pre>

<p>  end
end
```</p>

<p>This creates an ordinary table with a Paperclip attachment and a <code>default</code>
boolean field. But notice the specifics of the unique <code>index</code> above; it&rsquo;s a
partial index only on the rows where the value of <code>default</code> is true. This
validates that there is only one default image for any given object at a time.</p>

<p>In the <code>ImageAttachment</code> model itself, we can set a conditional uniqueness
on the <code>imageable</code> scope. This validates the same in the Rails application
too:</p>

<p>```ruby</p>

<h1>app/models/image_attachment.rb</h1>

<p>class ImageAttachment &lt; ApplicationRecord
  belongs_to :imageable, polymorphic: true</p>

<p>  has_attached_file :data,</p>

<pre><code>styles:          { thumb:  '120x120#',            medium: '600x600&gt;'           },
convert_options: { thumb:  '-quality 75 -strip',  medium: '-quality 90 -strip' }
</code></pre>

<p>  validates_attachment_presence     :data
  validates_attachment_size         :data, less_than:    PAPERCLIP_IMAGE_SIZE_LIMIT
  validates_attachment_content_type :data, content_type: PAPERCLIP_IMAGE_CONTENT_TYPE</p>

<p>  # Conditional Uniqueness validation on the belongs_to scope
  validates :default, uniqueness: { scope: :imageable }, if: :default?</p>

<p>  # Methods to set/unset the default image
  def undefault!</p>

<pre><code>update(default: false)
</code></pre>

<p>  end</p>

<p>  def default!</p>

<pre><code>imageable.default_image.undefault! if imageable.default_image
update(default: true)
</code></pre>

<p>  end
end
```</p>

<p>Finally, we create an <code>Imageable</code> concern, which defines the relationship
with the <code>ImageAttachment</code> model and provides a <code>default_image</code> method:</p>

<p>```ruby</p>

<h1>app/models/concerns/imageable.rb</h1>

<p>module Imageable
  extend ActiveSupport::Concern</p>

<p>  included do</p>

<pre><code>has_many :image_attachments, as: :imageable, dependent: :destroy
alias_attribute :images, :image_attachments
</code></pre>

<p>  end</p>

<p>  def default_image</p>

<pre><code>images.find_by(default: true) || images.first
</code></pre>

<p>  end
end
```</p>

<p>Now, to be able to &ldquo;attach images&rdquo; to any model, all you have to do is to
<code>include Imageable</code>:</p>

<p>```ruby
class Post &lt; ApplicationRecord
  include Imageable</p>

<p>  # Other stuff
end</p>

<p>class Event &lt; ApplicationRecord
  include Imageable</p>

<p>  # Other stuff
end
```</p>
]]></content>
  </entry>
  
</feed>
