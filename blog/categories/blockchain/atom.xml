<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blockchain | Sheharyar Naseer]]></title>
  <link href="https://sheharyar.me/blog/categories/blockchain/atom.xml" rel="self"/>
  <link href="https://sheharyar.me/"/>
  <updated>2018-07-19T16:21:31-04:00</updated>
  <id>https://sheharyar.me/</id>
  <author>
    <name><![CDATA[Sheharyar Naseer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing a Simple Blockchain in Elixir]]></title>
    <link href="https://sheharyar.me/blog/writing-blockchain-elixir/"/>
    <updated>2018-01-17T20:13:49-05:00</updated>
    <id>https://sheharyar.me/blog/writing-blockchain-elixir</id>
    <content type="html"><![CDATA[<p>With all the hype about Bitcoin and other cryptocurrencies in recent years, I wanted to understand
their underlying technology, i.e. Blockchain, better. So of course, what better way to learn than
write my own. After reading up a bit on the internals of Bitcoin, the basic structure of blockchains
and related data structures such as Merkle Trees, I decided to write a very simple version in Elixir.</p>

<!-- more -->


<p>I went with Elixir for a couple of reasons:</p>

<ol>
<li> To get better at it</li>
<li> See how Erlang&rsquo;s distributed model could help me with replication</li>
<li> I just love the damn language too much</li>
</ol>


<p>The original blockchain I wrote is a bit complicated since I end up adding too many features (I wanted
to experiment with node synchronization, RPC calls, cryptographic validations using Ecto, and file
storage as an application). So for the purposes of this article, we are going to write a blockchain
that simply stores some text in each block (but you can check out the <a href="https://github.com/sheharyarn/dbfs/">actual project here</a>).</p>

<h2>The Basics</h2>

<p>In the simplest of terms, a blockchain is basically a list of &ldquo;blocks&rdquo; where each block object/struct
stores a cryptographic hash of the previous block. A blockchain is valid only if the hash of each block in
the chain matches the stored hash in the next one. Cryptographically, this means that if the tiniest bit
of data changes in any block, the hashes of all consequent blocks would change drastically and as a result
invalidate the blockchain. So, a blockchain must always be append-only, i.e. no previous data can be
changed or removed.</p>

<h2>Structure</h2>

<p>Each block in the chain must store a couple of items; such as the data being stored and the timestamp it
was created on. We also need to store the has of the previous block, and for good measure let&rsquo;s store the
hash of the current block as well. Although we should also use Public-Key Cryptography and store the
signature of the author (which can be verified later), we&rsquo;re going to ignore that part and focus on
understanding the basics (maybe we can do that in another blog post in the future). Our struct should look
something like this:</p>

<p><code>elixir
%Block{
  data: some_text,
  timestamp: naive_datetime,
  prev_hash: hash_of_the_previous_block,
  hash: hash_of_the_current_block,
}
</code></p>

<p>So, let&rsquo;s create a Block module, with two methods; <code>new/2</code> that takes the data that&rsquo;s going to go in the
block along with the hash of the previous block, and a <code>zero/0</code> method that builds the first &ldquo;zero&rdquo; block
in a blockchain:</p>

<p>```elixir
defmodule Block do
  defstruct [:data, :timestamp, :prev_hash, :hash]</p>

<p>  @doc &ldquo;Build a new block for given data and previous hash&rdquo;
  def new(data, prev_hash) do</p>

<pre><code>%Block{
  data: data,
  prev_hash: prev_hash,
  timestamp: NaiveDateTime.utc_now,
}
</code></pre>

<p>  end</p>

<p>  @doc &ldquo;Build the initial block of the chain&rdquo;
  def zero do</p>

<pre><code>%Block{
  data: "ZERO_DATA",
  prev_hash: "ZERO_HASH",
  timestamp: NaiveDateTime.utc_now,
}
</code></pre>

<p>  end</p>

<p>end
```</p>

<h2>Cryptography</h2>

<p>Since blockchains involve a lot of cryptography, it&rsquo;s better to have a separate module responsible for it
and provide a uniform interface (so we can change the implementation in the future if we want without
breaking the functionality). We also need to encode our data in some format before we hash it. You can go
with anything you want, but we&rsquo;re going to use JSON. Start by adding the <code>poison</code> dependency in your
<code>mix.exs</code> file:</p>

<p><code>elixir
{:poison, "~&gt; 3.1"}
</code></p>

<p>And then create a <code>Crypto</code> module with the helper hashing functions. We&rsquo;ll use the built in SHA256 hashing
in Erlang&rsquo;s <code>:crypto</code> module:</p>

<p>```elixir
defmodule Crypto do</p>

<p>  # Specify which fields to hash in a block
  @hash_fields [:data, :timestamp, :prev_hash]</p>

<p>  @doc &ldquo;Calculate hash of block&rdquo;
  def hash(%{} = block) do</p>

<pre><code>block
|&gt; Map.take(@hash_fields)
|&gt; Poison.encode!
|&gt; sha256
</code></pre>

<p>  end</p>

<p>  @doc &ldquo;Calculate and put the hash in the block&rdquo;
  def put_hash(%{} = block) do</p>

<pre><code>%{ block | hash: hash(block) }
</code></pre>

<p>  end</p>

<p>  # Calculate SHA256 for a binary string
  defp sha256(binary) do</p>

<pre><code>:crypto.hash(:sha256, binary) |&gt; Base.encode16
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>We were very careful to only encode only the main 3 fields here (without the <code>hash</code> field of the block)
using the <code>Map.take/2</code> function, and then calculate their SHA256. We also added a helper method <code>put_hash/1</code>
to directly put the hash in it. If we were using public-key cryptography and storing the author&rsquo;s signature
in the blocks as well, we would have created <code>sign/1</code> and <code>verify/1</code> methods for that purpose, using the
<a href="https://github.com/anoskov/rsa-ex/">RsaEx</a> library or Erlang&rsquo;s built-in <a href="http://erlang.org/doc/man/public_key.html">:public_key</a> module.</p>

<p>We&rsquo;ll also add a <code>valid?</code> method in our <code>Block</code> module to check if the hash of block is valid, and matches
the previous block&rsquo;s hash. When only the block itself is given, it calculates the hash of the block and
compares it with the stored value. But when the previous block is also given, it compares the value of the
previous block&rsquo;s hash to the one stored in the <code>prev_hash</code> field:</p>

<p>```elixir
defmodule Block do</p>

<p>  # Existing stuff&hellip;</p>

<p>  @doc &ldquo;Check if a block is valid&rdquo;
  def valid?(%Block{} = block) do</p>

<pre><code>Crypto.hash(block) == block.hash
</code></pre>

<p>  end</p>

<p>  def valid?(%Block{} = block, %Block{} = prev_block) do</p>

<pre><code>(block.prev_hash == prev_block.hash) &amp;&amp; valid?(block)
</code></pre>

<p>  end</p>

<p>end
```</p>

<h2>Bringing it Together</h2>

<p>Finally, let&rsquo;s build the Blockchain module that contains all blocks in order and provides a neat interface
to insert new blocks and calculate their hashes. Ideally, the blockchain should be stored on the disk
(using a database, for example) and the module providing a quick interface to it. Even if we decide to not
persist the chain on the disk, we can use GenServers or Mnesia tables to maintain the state. But again,
for the purposes of this post, we won&rsquo;t manage the state and just interact with it as a list.</p>

<p>```elixir
defmodule Blockchain do
  @doc &ldquo;Create a new blockchain with a zero block&rdquo;
  def new do</p>

<pre><code>[ Crypto.put_hash(Block.zero) ]
</code></pre>

<p>  end</p>

<p>  @doc &ldquo;Insert given data as a new block in the blockchain&rdquo;
  def insert(blockchain, data) when is_list(blockchain) do</p>

<pre><code>%Block{hash: prev} = hd(blockchain)

block =
  data
  |&gt; Block.new(prev)
  |&gt; Crypto.put_hash

[ block | blockchain ]
</code></pre>

<p>  end</p>

<p>  @doc &ldquo;Validate the complete blockchain&rdquo;
  def valid?(blockchain) when is_list(blockchain) do</p>

<pre><code>zero = Enum.reduce_while(blockchain, nil, fn prev, current -&gt;
  cond do
    current == nil -&gt;
      {:cont, prev}

    Block.valid?(current, prev) -&gt;
      {:cont, prev}

    true -&gt;
      {:halt, false}
  end
end)

if zero, do: Block.valid?(zero), else: false
</code></pre>

<p>  end
end
```</p>

<p>The <code>new/0</code> method returns a new blockchain, with a zero block as its only contents. The <code>insert/2</code> method
creates a new block for the given data, hashes it and inserts it into the blockchain, returning the updated
state. Finally, the most interesting method here, <code>valid?/1</code>, goes through the entire blockchain in reverse
order (most recent block to the oldest one) using <code>Enum.reduce_while/3</code>, validating blocks in pairs. If at
any point the internal <code>Block.valid?</code> returns false, the entire method does too.</p>

<h2>Running it</h2>

<p>We don&rsquo;t have fancy blockchain network running right now, so we&rsquo;ll simply jump in <code>iex</code> and test it out
there:</p>

<p>```elixir</p>

<h1>Create a new Blockchain</h1>

<p>iex(1)> chain = Blockchain.new
[%Block{data: &ldquo;ZERO_DATA&rdquo;,
  hash: &ldquo;BDC59FEE8F9239579CB4A29828F5F19B081EF3D34A99331E898B22CDDA7922F0&rdquo;,
  prev_hash: &ldquo;ZERO_HASH&rdquo;, timestamp: ~N[2018-01-14 10:25:25.936002]}]</p>

<h1>Insert new data as a block</h1>

<p>iex(2)> chain = Blockchain.insert(chain, &ldquo;MESSAGE 1&rdquo;)
[%Block{data: &ldquo;MESSAGE 1&rdquo;,
  hash: &ldquo;A14F863D347E37B54DD68BB12251A74FE06EA0623DC40856EBC81942B63001FE&rdquo;,
  prev_hash: &ldquo;BDC59FEE8F9239579CB4A29828F5F19B081EF3D34A99331E898B22CDDA7922F0&rdquo;,
  timestamp: ~N[2018-01-14 10:26:40.121790]},
 %Block{data: &ldquo;ZERO_DATA&rdquo;,
  hash: &ldquo;BDC59FEE8F9239579CB4A29828F5F19B081EF3D34A99331E898B22CDDA7922F0&rdquo;,
  prev_hash: &ldquo;ZERO_HASH&rdquo;, timestamp: ~N[2018-01-14 10:25:25.936002]}]</p>

<h1>Insert a few more blocks</h1>

<p>iex(3)> chain = chain |> Blockchain.insert(&ldquo;MESSAGE 2&rdquo;) |> Blockchain.insert(&ldquo;MESSAGE 3&rdquo;)
[%Block{data: &ldquo;MESSAGE 3&rdquo;,
  hash: &ldquo;3708929579029151347B9C588E79EDEEF4E9911579AF9CF5BD2D4437B0FFBEDF&rdquo;,
  prev_hash: &ldquo;FA609D2A255FD56B90D5F10108B804DF4BF42CA257CDECC291698783DDC74CB0&rdquo;,
  timestamp: ~N[2018-01-14 10:27:07.874248]},
 %Block{data: &ldquo;MESSAGE 2&rdquo;,
  hash: &ldquo;FA609D2A255FD56B90D5F10108B804DF4BF42CA257CDECC291698783DDC74CB0&rdquo;,
  prev_hash: &ldquo;A14F863D347E37B54DD68BB12251A74FE06EA0623DC40856EBC81942B63001FE&rdquo;,
  timestamp: ~N[2018-01-14 10:27:07.874129]},
 %Block{data: &ldquo;MESSAGE 1&rdquo;,
  hash: &ldquo;A14F863D347E37B54DD68BB12251A74FE06EA0623DC40856EBC81942B63001FE&rdquo;,
  prev_hash: &ldquo;BDC59FEE8F9239579CB4A29828F5F19B081EF3D34A99331E898B22CDDA7922F0&rdquo;,
  timestamp: ~N[2018-01-14 10:26:40.121790]},
 %Block{data: &ldquo;ZERO_DATA&rdquo;,
  hash: &ldquo;BDC59FEE8F9239579CB4A29828F5F19B081EF3D34A99331E898B22CDDA7922F0&rdquo;,
  prev_hash: &ldquo;ZERO_HASH&rdquo;, timestamp: ~N[2018-01-14 10:25:25.936002]}]</p>

<h1>Validate the Blockchain</h1>

<p>iex(4)> Blockchain.valid?(chain)
true
```</p>

<h2>Concluding Notes</h2>

<p>That&rsquo;s it for our simple blockchain. I hope that gave you a somewhat basic idea of how a
blockchain works. Of course there&rsquo;s a lot more we can do, such as:</p>

<ul>
<li>Use some kind of data store to maintain state</li>
<li>Or better yet, use Ecto (with or without a database) to take advantage of its changesets
and <a href="https://github.com/sheharyarn/dbfs/blob/9233941c7c3ddc41676762789bc8aa0599ba369f/lib/dbfs/block/block.ex#L33-L39">validations</a></li>
<li>Employ Public-Key Cryptography and <a href="https://github.com/sheharyarn/dbfs/blob/9233941c7c3ddc41676762789bc8aa0599ba369f/lib/dbfs/crypto.ex#L23-L36">sign blocks</a> before hashing them</li>
<li>Implement a <a href="https://github.com/sheharyarn/dbfs/blob/9233941c7c3ddc41676762789bc8aa0599ba369f/lib/dbfs/json.ex#L23-L53">custom encoding scheme</a> in a certain order to always guarantee
the same hash for a given map (For example, <a href="https://github.com/devinus/poison/issues/21">Maps in Elixir are unordered</a>
and the hash generated would almost never be the same as one generated in another language
for the same values)</li>
</ul>


<p>With the powerful Erlang Virtual Machine, we can also do some fancy stuff:</p>

<ul>
<li>Have a distributed network of nodes running the blockchain</li>
<li>Maintaining Blockchain state in Mnesia across many nodes</li>
<li>Broadcast new blocks to the entire network</li>
<li>Perform state consensus and implement conflict resolution</li>
</ul>


<p>Here are some other blockchain &amp; elixir related resources and projects:</p>

<ul>
<li><a href="https://medium.com/@lhartikk/a-blockchain-in-200-lines-of-code-963cc1cc0e54#.dttbm9afr5">Blog Post: Blockchain in 200 lines of code</a></li>
<li><a href="https://elixirforum.com/t/the-blockchain-distributed-ledger-technology/451">ElixirForum: Blockchain Discussion</a></li>
<li><a href="https://github.com/eduardonunesp/ex_chain">Github: ExChain</a> &ndash; A simple blockchain implementation in ELixir</li>
<li><a href="https://github.com/robinmonjo/coincoin">Github: CoinCoin</a> &ndash; Amazing cryptocurrency proof-of-concept in Elixir by @robinmonjo</li>
<li><a href="http://www.petecorey.com/blog/2017/09/18/exploring-the-bitcoin-blockchain-with-elixir-and-phoenix/">Blog Post: Exploring Bitcoin Blockchain with Phoenix</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
