<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Elixir | Sheharyar Naseer]]></title>
  <link href="https://sheharyar.me/blog/categories/elixir/atom.xml" rel="self"/>
  <link href="https://sheharyar.me/"/>
  <updated>2018-02-10T17:26:17-05:00</updated>
  <id>https://sheharyar.me/</id>
  <author>
    <name><![CDATA[Sheharyar Naseer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Background Job Processing in Elixir With Que]]></title>
    <link href="https://sheharyar.me/blog/elixir-job-processing-with-que/"/>
    <updated>2017-07-16T19:54:07-04:00</updated>
    <id>https://sheharyar.me/blog/elixir-job-processing-with-que</id>
    <content type="html"><![CDATA[<p>Elixir and Erlang provide a simple yet powerful set of features for data sharing,
reliability and fault-tolerance, commonly known together as OTP. These consist of
modules and behaviors such as GenServers and Supervisors among many others,
providing an easy and efficient way to design reliable background processes
without too much work.</p>

<p>There already are excellent background job processing libraries for Elixir, such
as <a href="https://github.com/akira/exq">Exq</a> and <a href="https://github.com/joakimk/toniq">Toniq</a>, that make use of them to provide an interface
for working with background job workers, to developers unfamiliar with OTP. But
all of these libraries are either excessively complicated, have dependence on
external programs and binaries such as Redis, or both.</p>

<!-- more -->


<p><a href="https://github.com/sheharyarn/que"><img src='https://i.imgur.com/Eec71eh.png' alt='Que' width='200px' /></a></p>

<p>Why would you lock yourself in with an external service, when Erlang itself ships
with an extremely fast, distributed real-time datastore, called <code>Mnesia</code>? So,
after a few months of hard work and testing it in multiple Elixir applications in
production, I am proud to announce <a href="https://github.com/sheharyarn/que">Que</a>. Que is an extemely easy to use
background job processing library for Elixir, that&rsquo;s backed by Mnesia. Taking
inspiration from intuitive job processing libraries in Ruby, Que&rsquo;s complete
setup takes less than a minute, and you can start writing job workers with almost
zero boilerplate or gibberish:</p>

<p>```elixir
defmodule App.Workers.ImageConverter do
  use Que.Worker</p>

<p>  def perform(image) do</p>

<pre><code>ImageTool.save_resized_copy!(image, :thumbnail)
ImageTool.save_resized_copy!(image, :medium)
</code></pre>

<p>  end
end
```</p>

<p>Adding support for concurrency is also easy-as-pie, one argument and you&rsquo;re done:</p>

<p><code>elixir
use Que.Worker, concurrency: 4
</code></p>

<p>Que makes use of powerful Elixir and OTP features, such as:</p>

<ul>
<li>Pattern Matching</li>
<li>Worker Supervision</li>
<li>Job Success Callbacks</li>
<li>Failure Recovery and Callback</li>
<li>Concurrency</li>
<li>In-Memory and On-Disk storage</li>
</ul>


<p>By default, Que automatically configures the application to store all jobs in
memory, but you can persist them across application restarts using:</p>

<p><code>bash
mix que.setup
</code></p>

<p>Check out the project on <a href="https://github.com/sheharyarn/que">Github</a> and <a href="https://hexdocs.pm/que">Hexdocs</a> for more details.</p>
]]></content>
  </entry>
  
</feed>
