<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Unix, | Sheharyar Naseer]]></title>
  <link href="https://sheharyar.me/blog/categories/unix/atom.xml" rel="self"/>
  <link href="https://sheharyar.me/"/>
  <updated>2018-02-14T01:35:49-05:00</updated>
  <id>https://sheharyar.me/</id>
  <author>
    <name><![CDATA[Sheharyar Naseer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What I Learned From the GNU Grep]]></title>
    <link href="https://sheharyar.me/blog/what-i-learned-from-the-gnu-grep/"/>
    <updated>2015-03-05T18:27:12-05:00</updated>
    <id>https://sheharyar.me/blog/what-i-learned-from-the-gnu-grep</id>
    <content type="html"><![CDATA[<p>While going through my <a href="https://news.ycombinator.com/news">HackerNews</a> feed today, I came across this:
<a href="http://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html">Why GNU Grep is Fast</a>. It&rsquo;s an archived
email from Mike Haertel, the original author of the GNU Grep, to Gabor Kovesdan discussing the reasons behind the speed
of the GNU Grep.</p>

<p>The email is filled with great knowledge in easy-to-understand &ldquo;tricks&rdquo;.</p>

<!--more-->


<p>Two of these tricks that speed up Grep, Mike explains, are:</p>

<blockquote><ul>
<li>Grep avoids looking at every Input Byte</li>
<li>Grep executes very few instuctions for each byte it <em>does</em> look at</li>
</ul>
</blockquote>

<p>Other great lessons, I took away, are:</p>

<blockquote><ul>
<li>Use of Boyer-Moore Algorithm</li>
<li>Use of Unbuffered Input using Raw System Call and avoid copying the input before searching it</li>
<li>Don&rsquo;t look for newlines until after a match has been found</li>
<li>You need to get down to the Kernel&rsquo;s level to make it really fast</li>
</ul>
</blockquote>

<p> And the greatest lesson:</p>

<blockquote><p>The key to making programs fast is to make them do practically nothing</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sync MongoDB Data Between Development and Production Databases]]></title>
    <link href="https://sheharyar.me/blog/sync-mongodb-local-and-production-heroku/"/>
    <updated>2015-02-14T20:50:44-05:00</updated>
    <id>https://sheharyar.me/blog/sync-mongodb-local-and-production-heroku</id>
    <content type="html"><![CDATA[<p>For a recent project of mine, I had to constantly copy my local MongoDB Database to and from my Production Heroku Database.
Running <code>mongodump</code> and <code>mongorestore</code> again and again with complicated flags to support remote urls quickly became a hassle.
I had previously used <a href="https://github.com/pedro/heroku-mongo-sync">heroku-mongo-sync</a>, but it is now deprecated in favor of
<a href="https://github.com/marcofognog/heroku-mongo-sync">marcofognog&rsquo;s fork</a>. Sadly, neither of them worked for me.</p>

<p>So I decided to write my own. Meet <a href="https://github.com/sheharyarn/mongo-sync"><strong>mongo-sync</strong></a>.</p>

<!-- more -->


<p><a href="https://github.com/sheharyarn/mongo-sync"><img src="https://i.imgur.com/hg6hwLk.gif" alt="mongo-sync demo gif" /></a></p>

<p>It&rsquo;s a simple shell script that allows you to sync your local and remote MongoDB databases, using two commands; <code>push</code> and <code>pull</code>.
Start by cloning the script on your machine:</p>

<p><code>bash
git clone https://github.com/sheharyarn/mongo-sync.git
cd mongo-sync
</code></p>

<p>Edit the provided <code>config.yml</code> with your db details:</p>

<p>```yaml
local:
  db: &lsquo;local_db_name&rsquo;</p>

<p>remote:
  db: &lsquo;remote_db_name&rsquo;
  host:</p>

<pre><code>url: 'some.remoteurl.com'
port: 27017
</code></pre>

<p>  access:</p>

<pre><code>username: 'remote_mongo_user'
password: 'remote_mongo_pass'
</code></pre>

<h1>For Heroku MongoDB URLs, here&rsquo;s the legend:</h1>

<h1>mongodb://username:password@hosturl.com:port/db_name</h1>

<p>```</p>

<p>Now, you can start syncing your databases:</p>

<p><code>bash
./mongo-sync push       # Push DB to Remote
./mongo-sync pull       # Pull DB to Local
</code></p>

<p>I&rsquo;m planning to convert it into a Ruby Gem and a Heroku Plugin as well.</p>

<h1>Github: <a href="https://github.com/sheharyarn/mongo-sync">sheharyarn / mongo-sync</a></h1>

<br/>


<br/>


<h3>Notes</h3>

<ul>
<li>The <code>push</code> and <code>pull</code> commands overwrite the target DB</li>
<li>If you include this script into your project, it&rsquo;s a good idea to add <code>config.yml</code> to your <code>.gitignore</code></li>
</ul>


<br/>


<h3>Further Reading</h3>

<ul>
<li><a href="http://docs.mongodb.org/manual/reference/program/mongodump/#bin.mongodump">mongodump</a></li>
<li><a href="http://docs.mongodb.org/manual/reference/program/mongorestore/#bin.mongorestore">mongorestore</a></li>
<li><a href="http://www.theirishpenguin.com/2011/01/20/push-and-pull-data-between-your-local-mongodb-and-heroku-or-mongohq.html">Push and pull data between your local MongoDB and Heroku or MongoHQ</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
