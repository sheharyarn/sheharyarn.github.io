<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Phoenix | Sheharyar Naseer]]></title>
  <link href="https://sheharyar.me/blog/categories/phoenix/atom.xml" rel="self"/>
  <link href="https://sheharyar.me/"/>
  <updated>2018-07-29T03:09:16-04:00</updated>
  <id>https://sheharyar.me/</id>
  <author>
    <name><![CDATA[Sheharyar Naseer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a Simple Chat App With Elixir and Phoenix]]></title>
    <link href="https://sheharyar.me/blog/simple-chat-phoenix-elixir/"/>
    <updated>2016-05-22T12:33:05-04:00</updated>
    <id>https://sheharyar.me/blog/simple-chat-phoenix-elixir</id>
    <content type="html"><![CDATA[<p>The past few years, more and more applications have been transitioning to websockets
for real-time communication, even forcing some frameworks to implement them (such as
<a href="https://github.com/rails/rails/pull/22586">ActionCable in Rails 5</a>). The <a href="http://www.phoenixframework.org/docs/overview">Phoenix Framework</a> for Elixir implements it
natively, without depending on any external programs such as <code>Redis</code>.</p>

<p>Today, we&rsquo;re going to build a super simple chat application in Elixir using the Phoenix
Framework. We&rsquo;re going to ignore authentication, authorization and other features so we
can quickly go over the basics, and get websockets in Elixir running.</p>

<!-- more -->


<h2>Getting Started</h2>

<p>Start by installing <a href="http://elixir-lang.org/install.html">Elixir</a> and <a href="http://www.phoenixframework.org/docs/installation">Phoenix</a>. Optionally, check out my talk on
<a href="/blog/talk-introduction-to-elixir/">Introduction to Elixir</a>. Create a new phoenix project and call it whatever you
like, and start the server so you can see the app in your browser:</p>

<p>```bash</p>

<h1>Create a new Phoenix project called chatroom</h1>

<p>$ mix phoenix.new chatroom</p>

<h1>Start the server</h1>

<p>$ cd chatroom
$ mix phoenix.server
```</p>

<h2>Creating the View</h2>

<p>Let&rsquo;s start with something easy by writing the markup and CSS for our chat app. Open
<code>web/templates/page/index.html.eex</code>, and replace its contents with:</p>

<p>```html</p>

<div id='message-list' class='row'>
</div>




<div class='row form-group'>
  <div class='col-md-3'>
    <input type='text' id='name' class='form-control' placeholder='Name' />
  </div>
  <div class='col-md-9'>
    <input type='text' id='message' class='form-control' placeholder='Message' />
  </div>
</div>


<p>```</p>

<p>We&rsquo;ve created an empty <code>div</code> that will list all chat messages and two text fields (one
for the user&rsquo;s name and one for the message). Now open <code>web/static/css/app.css</code> and
paste this at the end:</p>

<p>```css</p>

<h1>message-list {</h1>

<p>  border: 1px solid #777;
  height: 400px;
  padding: 10px;
  overflow: scroll;
  margin-bottom: 50px;
}
```</p>

<p>Point your browser to <code>localhost:4000</code>, it should look like this:</p>

<p><a href="https://i.imgur.com/xs9NLHH.png"><img src="https://i.imgur.com/xs9NLHH.png" alt="Phoenix Chat Markup Screenshot" /></a></p>

<h2>Setting up a new Channel</h2>

<p>We&rsquo;re going to create a new channel called <code>lobby</code>. Open up <code>web/channels/user_socket.ex</code>
and add this line:</p>

<p><code>elixir
channel "lobby", Chatroom.LobbyChannel
</code></p>

<p>Create a new file called <code>web/channels/lobby_channel.ex</code> and implement the
functionality for the new <code>lobby</code> channel. The <code>join</code> method here always returns
<code>{:ok, socket}</code> to allow all connections to the channel. The <code>handle_in</code> method is
fired every time a new incoming message is received on the socket, which broadcasts
that message to all other open sockets.</p>

<p>```elixir
defmodule Chatroom.LobbyChannel do
  use Phoenix.Channel</p>

<p>  def join(&ldquo;lobby&rdquo;, _payload, socket) do</p>

<pre><code>{:ok, socket}
</code></pre>

<p>  end</p>

<p>  def handle_in(&ldquo;new_message&rdquo;, payload, socket) do</p>

<pre><code>broadcast! socket, "new_message", payload
{:noreply, socket}
</code></pre>

<p>  end
end
```</p>

<h2>Handling the connections on Client-side</h2>

<p>To make things easier, we&rsquo;ll start by adding <code>jQuery</code> to our
<code>web/templates/layouts/app.html.eex</code>:</p>

<p>```html</p>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>


<script src="<%= static_path(@conn, "/js/app.js") %>"></script>


<p>```</p>

<p>Phoenix comes packed with a simple javascript socket client, but it&rsquo;s disabled
by default. Go into your <code>web/static/js/app.js</code> and uncomment the last line:</p>

<p><code>javascript
// ...
import socket from "./socket"
</code></p>

<p>Go into your <code>web/static/js/socket.js</code> and paste in this:</p>

<p>```javascript
// &hellip;</p>

<p>let channel = socket.channel(&ldquo;lobby&rdquo;, {});
let list    = $(&lsquo;#message-list&rsquo;);
let message = $(&lsquo;#message&rsquo;);
let name    = $(&lsquo;#name&rsquo;);</p>

<p>message.on(&lsquo;keypress&rsquo;, event => {
  if (event.keyCode == 13) {</p>

<pre><code>channel.push('new_message', { name: name.val(), message: message.val() });
message.val('');
</code></pre>

<p>  }
});</p>

<p>channel.on(&lsquo;new_message&rsquo;, payload => {
  list.append(<code>&lt;b&gt;${payload.name || 'Anonymous'}:&lt;/b&gt; ${payload.message}&lt;br&gt;</code>);
  list.prop({scrollTop: list.prop(&ldquo;scrollHeight&rdquo;)});
});</p>

<p>channel.join()
  .receive(&ldquo;ok&rdquo;, resp => { console.log(&ldquo;Joined successfully&rdquo;, resp) })
  .receive(&ldquo;error&rdquo;, resp => { console.log(&ldquo;Unable to join&rdquo;, resp) })</p>

<p>// &hellip;
```</p>

<p>Here, we listen for a <code>keypress</code> event on the message text field. Whenever the user
enters a message, it&rsquo;s pushed on the channel and the text field is cleared. When
there&rsquo;s an incoming message on the channel, it&rsquo;s appended to the div we previously
created and scrolled to the bottom.</p>

<p><a href="https://i.imgur.com/51jlQIO.png"><img src="https://i.imgur.com/51jlQIO.png" alt="Chat app working" /></a></p>

<h2>Going from there</h2>

<p>So far we&rsquo;ve implemented a super simple chat application in Elixir. It&rsquo;s obviously not
perfect and there&rsquo;s alot of stuff missing. The next logical step would be to add some
sort of authentication and authorization, and implement more one-on-one and private
chat rooms.</p>

<p>Here are some links you should check out:</p>

<ul>
<li>Source of <a href="https://github.com/sheharyarn/simple-phoenix-chat">Simple Phoenix Chat</a> on Github</li>
<li><a href="http://www.phoenixframework.org/docs/channels">Guide on Channels</a> on the Official Phoenix website</li>
<li><a href="https://youtu.be/RPs4SHpSThU">Video on Channels</a> by Chris Mccord</li>
</ul>

]]></content>
  </entry>
  
</feed>
